/*
 * generated by Xtext 2.9.0
 */
package org.xtext.example.mydsl1.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ADSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cImportElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportElementsAbstractElementsParserRuleCall_1_0 = (RuleCall)cImportElementsAssignment_1.eContents().get(0);
		private final Assignment cXclassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXclassXClassParserRuleCall_2_0 = (RuleCall)cXclassAssignment_2.eContents().get(0);
		
		/// *
		// * Loose grammar approach - validation should be strict
		// * / Program:
		//	('package' name=QualifiedName ';')?
		//	importElements+=AbstractElements*
		//	xclass+=XClass*;
		@Override public ParserRule getRule() { return rule; }
		
		//('package' name=QualifiedName ';')? importElements+=AbstractElements* xclass+=XClass*
		public Group getGroup() { return cGroup; }
		
		//('package' name=QualifiedName ';')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'package'
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }
		
		//importElements+=AbstractElements*
		public Assignment getImportElementsAssignment_1() { return cImportElementsAssignment_1; }
		
		//AbstractElements
		public RuleCall getImportElementsAbstractElementsParserRuleCall_1_0() { return cImportElementsAbstractElementsParserRuleCall_1_0; }
		
		//xclass+=XClass*
		public Assignment getXclassAssignment_2() { return cXclassAssignment_2; }
		
		//XClass
		public RuleCall getXclassXClassParserRuleCall_2_0() { return cXclassXClassParserRuleCall_2_0; }
	}
	public class AbstractElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.AbstractElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AbstractElements:
		//	'import' importedNamespace=QualifiedNameWithWildcard ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ImportElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.ImportElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ImportElements:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class XClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.XClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperclassAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperclassXClassCrossReference_3_1_0 = (CrossReference)cSuperclassAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperclassXClassQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cSuperclassXClassCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMembersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMembersMemberParserRuleCall_5_0 = (RuleCall)cMembersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XClass:
		//	'public' 'class' name=ID ('extends' superclass=[XClass|QualifiedName])?
		//	'{'
		//	members+=Member*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'public' 'class' name=ID ('extends' superclass=[XClass|QualifiedName])? '{' members+=Member* '}'
		public Group getGroup() { return cGroup; }
		
		//'public'
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('extends' superclass=[XClass|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//superclass=[XClass|QualifiedName]
		public Assignment getSuperclassAssignment_3_1() { return cSuperclassAssignment_3_1; }
		
		//[XClass|QualifiedName]
		public CrossReference getSuperclassXClassCrossReference_3_1_0() { return cSuperclassXClassCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getSuperclassXClassQualifiedNameParserRuleCall_3_1_0_1() { return cSuperclassXClassQualifiedNameParserRuleCall_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//members+=Member*
		public Assignment getMembersAssignment_5() { return cMembersAssignment_5; }
		
		//Member
		public RuleCall getMembersMemberParserRuleCall_5_0() { return cMembersMemberParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSharedDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFuncVarDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMethodParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOperatorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPrintInstParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMainMethodParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Member:
		//	VariableDef | SharedDef | FuncVarDef | Method | Operator | PrintInst | MainMethod;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableDef | SharedDef | FuncVarDef | Method | Operator | PrintInst | MainMethod
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableDef
		public RuleCall getVariableDefParserRuleCall_0() { return cVariableDefParserRuleCall_0; }
		
		//SharedDef
		public RuleCall getSharedDefParserRuleCall_1() { return cSharedDefParserRuleCall_1; }
		
		//FuncVarDef
		public RuleCall getFuncVarDefParserRuleCall_2() { return cFuncVarDefParserRuleCall_2; }
		
		//Method
		public RuleCall getMethodParserRuleCall_3() { return cMethodParserRuleCall_3; }
		
		//Operator
		public RuleCall getOperatorParserRuleCall_4() { return cOperatorParserRuleCall_4; }
		
		//PrintInst
		public RuleCall getPrintInstParserRuleCall_5() { return cPrintInstParserRuleCall_5; }
		
		//MainMethod
		public RuleCall getMainMethodParserRuleCall_6() { return cMainMethodParserRuleCall_6; }
	}
	public class MainMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.MainMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStaticKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDefKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMainKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeVariableTypeParserRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyBodyParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//MainMethod:
		//	'public' 'static' 'def' 'main' '(' type=VariableType ')'
		//	body=Body;
		@Override public ParserRule getRule() { return rule; }
		
		//'public' 'static' 'def' 'main' '(' type=VariableType ')' body=Body
		public Group getGroup() { return cGroup; }
		
		//'public'
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }
		
		//'static'
		public Keyword getStaticKeyword_1() { return cStaticKeyword_1; }
		
		//'def'
		public Keyword getDefKeyword_2() { return cDefKeyword_2; }
		
		//'main'
		public Keyword getMainKeyword_3() { return cMainKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//type=VariableType
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_5_0() { return cTypeVariableTypeParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//body=Body
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_7_0() { return cBodyBodyParserRuleCall_7_0; }
	}
	public class PrintInstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.PrintInst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConsoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PrintInst:
		//	'Console' ('.' ID)* '(' expression=Expression ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Console' ('.' ID)* '(' expression=Expression ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'Console'
		public Keyword getConsoleKeyword_0() { return cConsoleKeyword_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsconstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsconstConstKeyword_1_0 = (Keyword)cIsconstAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNameAlternatives_2_0 = (Alternatives)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAlternatives_2_0.eContents().get(0);
		private final Keyword cNameThisKeyword_2_0_1 = (Keyword)cNameAlternatives_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cIstypedAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cIstypedColonKeyword_6_0_0 = (Keyword)cIstypedAssignment_6_0.eContents().get(0);
		private final Assignment cTypeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cTypeVariableTypeParserRuleCall_6_1_0 = (RuleCall)cTypeAssignment_6_1.eContents().get(0);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyBodyParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//Method:
		//	'def' isconst?='const'? name=(ID | 'this') '(' (params+=Parameter (',' params+=Parameter)*)? ')' (istyped?=':'
		//	type=VariableType)?
		//	body=Body;
		@Override public ParserRule getRule() { return rule; }
		
		//'def' isconst?='const'? name=(ID | 'this') '(' (params+=Parameter (',' params+=Parameter)*)? ')' (istyped?=':'
		//type=VariableType)? body=Body
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//isconst?='const'?
		public Assignment getIsconstAssignment_1() { return cIsconstAssignment_1; }
		
		//'const'
		public Keyword getIsconstConstKeyword_1_0() { return cIsconstConstKeyword_1_0; }
		
		//name=(ID | 'this')
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//(ID | 'this')
		public Alternatives getNameAlternatives_2_0() { return cNameAlternatives_2_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0() { return cNameIDTerminalRuleCall_2_0_0; }
		
		//'this'
		public Keyword getNameThisKeyword_2_0_1() { return cNameThisKeyword_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(params+=Parameter (',' params+=Parameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_0_0() { return cParamsParameterParserRuleCall_4_0_0; }
		
		//(',' params+=Parameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_1_1_0() { return cParamsParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//(istyped?=':' type=VariableType)?
		public Group getGroup_6() { return cGroup_6; }
		
		//istyped?=':'
		public Assignment getIstypedAssignment_6_0() { return cIstypedAssignment_6_0; }
		
		//':'
		public Keyword getIstypedColonKeyword_6_0_0() { return cIstypedColonKeyword_6_0_0; }
		
		//type=VariableType
		public Assignment getTypeAssignment_6_1() { return cTypeAssignment_6_1; }
		
		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_6_1_0() { return cTypeVariableTypeParserRuleCall_6_1_0; }
		
		//body=Body
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_7_0() { return cBodyBodyParserRuleCall_7_0; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.Operator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOperatorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cOpNameAlternatives_2_0 = (Alternatives)cOpNameAssignment_2.eContents().get(0);
		private final RuleCall cOpNameIDTerminalRuleCall_2_0_0 = (RuleCall)cOpNameAlternatives_2_0.eContents().get(0);
		private final Keyword cOpNameThisKeyword_2_0_1 = (Keyword)cOpNameAlternatives_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cExpressionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExpressionExpressionParserRuleCall_7_0 = (RuleCall)cExpressionAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Operator:
		//	'public' 'operator' opName=(ID | 'this')
		//	'(' (params+=Parameter (',' params+=Parameter)*)? ')'
		//	'=' expression=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'public' 'operator' opName=(ID | 'this') '(' (params+=Parameter (',' params+=Parameter)*)? ')' '=' expression=Expression
		//';'
		public Group getGroup() { return cGroup; }
		
		//'public'
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }
		
		//'operator'
		public Keyword getOperatorKeyword_1() { return cOperatorKeyword_1; }
		
		//opName=(ID | 'this')
		public Assignment getOpNameAssignment_2() { return cOpNameAssignment_2; }
		
		//(ID | 'this')
		public Alternatives getOpNameAlternatives_2_0() { return cOpNameAlternatives_2_0; }
		
		//ID
		public RuleCall getOpNameIDTerminalRuleCall_2_0_0() { return cOpNameIDTerminalRuleCall_2_0_0; }
		
		//'this'
		public Keyword getOpNameThisKeyword_2_0_1() { return cOpNameThisKeyword_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(params+=Parameter (',' params+=Parameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_0_0() { return cParamsParameterParserRuleCall_4_0_0; }
		
		//(',' params+=Parameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_1_1_0() { return cParamsParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_7() { return cExpressionAssignment_7; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_7_0() { return cExpressionExpressionParserRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class FuncVarDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.FuncVarDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeVariableTypeParserRuleCall_7_0 = (RuleCall)cTypeAssignment_7.eContents().get(0);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Assignment cParamsAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_10_0_0 = (RuleCall)cParamsAssignment_10_0.eContents().get(0);
		private final Group cGroup_10_1 = (Group)cGroup_10.eContents().get(1);
		private final Keyword cCommaKeyword_10_1_0 = (Keyword)cGroup_10_1.eContents().get(0);
		private final Assignment cParamsAssignment_10_1_1 = (Assignment)cGroup_10_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_10_1_1_0 = (RuleCall)cParamsAssignment_10_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cEqualsSignGreaterThanSignKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cBodyAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cBodyBodyParserRuleCall_13_0 = (RuleCall)cBodyAssignment_13.eContents().get(0);
		private final Keyword cSemicolonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//FuncVarDef:
		//	'val' name=ID ':' '(' (params+=Parameter (',' params+=Parameter)*)? ')'
		//	'=>' type=VariableType '=' '(' (params+=Parameter (',' params+=Parameter)*)? ')'
		//	'=>' body=Body ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'val' name=ID ':' '(' (params+=Parameter (',' params+=Parameter)*)? ')' '=>' type=VariableType '=' '('
		//(params+=Parameter (',' params+=Parameter)*)? ')' '=>' body=Body ';'
		public Group getGroup() { return cGroup; }
		
		//'val'
		public Keyword getValKeyword_0() { return cValKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(params+=Parameter (',' params+=Parameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_0_0() { return cParamsParameterParserRuleCall_4_0_0; }
		
		//(',' params+=Parameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_1_1_0() { return cParamsParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_6() { return cEqualsSignGreaterThanSignKeyword_6; }
		
		//type=VariableType
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }
		
		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_7_0() { return cTypeVariableTypeParserRuleCall_7_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9() { return cLeftParenthesisKeyword_9; }
		
		//(params+=Parameter (',' params+=Parameter)*)?
		public Group getGroup_10() { return cGroup_10; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_10_0() { return cParamsAssignment_10_0; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_10_0_0() { return cParamsParameterParserRuleCall_10_0_0; }
		
		//(',' params+=Parameter)*
		public Group getGroup_10_1() { return cGroup_10_1; }
		
		//','
		public Keyword getCommaKeyword_10_1_0() { return cCommaKeyword_10_1_0; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_10_1_1() { return cParamsAssignment_10_1_1; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_10_1_1_0() { return cParamsParameterParserRuleCall_10_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11() { return cRightParenthesisKeyword_11; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_12() { return cEqualsSignGreaterThanSignKeyword_12; }
		
		//body=Body
		public Assignment getBodyAssignment_13() { return cBodyAssignment_13; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_13_0() { return cBodyBodyParserRuleCall_13_0; }
		
		//';'
		public Keyword getSemicolonKeyword_14() { return cSemicolonKeyword_14; }
	}
	public class VariableDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.VariableDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsstaticAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsstaticStaticKeyword_0_0 = (Keyword)cIsstaticAssignment_0.eContents().get(0);
		private final Assignment cVartypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cVartypeAlternatives_1_0 = (Alternatives)cVartypeAssignment_1.eContents().get(0);
		private final Keyword cVartypeVarKeyword_1_0_0 = (Keyword)cVartypeAlternatives_1_0.eContents().get(0);
		private final Keyword cVartypeValKeyword_1_0_1 = (Keyword)cVartypeAlternatives_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cIstypedAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cIstypedColonKeyword_3_0_0 = (Keyword)cIstypedAssignment_3_0.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeVariableTypeParserRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cIsinitAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cIsinitEqualsSignKeyword_4_0_0 = (Keyword)cIsinitAssignment_4_0.eContents().get(0);
		private final Assignment cExpressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExpressionArithExpressionParserRuleCall_4_1_0 = (RuleCall)cExpressionAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//VariableDef:
		//	isstatic?='static'? vartype=('var' | 'val') name=ID (istyped?=':' type=VariableType)? (isinit?='='
		//	expression=ArithExpression)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//isstatic?='static'? vartype=('var' | 'val') name=ID (istyped?=':' type=VariableType)? (isinit?='='
		//expression=ArithExpression)? ';'
		public Group getGroup() { return cGroup; }
		
		//isstatic?='static'?
		public Assignment getIsstaticAssignment_0() { return cIsstaticAssignment_0; }
		
		//'static'
		public Keyword getIsstaticStaticKeyword_0_0() { return cIsstaticStaticKeyword_0_0; }
		
		//vartype=('var' | 'val')
		public Assignment getVartypeAssignment_1() { return cVartypeAssignment_1; }
		
		//('var' | 'val')
		public Alternatives getVartypeAlternatives_1_0() { return cVartypeAlternatives_1_0; }
		
		//'var'
		public Keyword getVartypeVarKeyword_1_0_0() { return cVartypeVarKeyword_1_0_0; }
		
		//'val'
		public Keyword getVartypeValKeyword_1_0_1() { return cVartypeValKeyword_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(istyped?=':' type=VariableType)?
		public Group getGroup_3() { return cGroup_3; }
		
		//istyped?=':'
		public Assignment getIstypedAssignment_3_0() { return cIstypedAssignment_3_0; }
		
		//':'
		public Keyword getIstypedColonKeyword_3_0_0() { return cIstypedColonKeyword_3_0_0; }
		
		//type=VariableType
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_3_1_0() { return cTypeVariableTypeParserRuleCall_3_1_0; }
		
		//(isinit?='=' expression=ArithExpression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//isinit?='='
		public Assignment getIsinitAssignment_4_0() { return cIsinitAssignment_4_0; }
		
		//'='
		public Keyword getIsinitEqualsSignKeyword_4_0_0() { return cIsinitEqualsSignKeyword_4_0_0; }
		
		//expression=ArithExpression
		public Assignment getExpressionAssignment_4_1() { return cExpressionAssignment_4_1; }
		
		//ArithExpression
		public RuleCall getExpressionArithExpressionParserRuleCall_4_1_0() { return cExpressionArithExpressionParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class SharedArrayDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.SharedArrayDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSharedValKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReplicasAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cReplicasReplicasKeyword_1_0 = (Keyword)cReplicasAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeVariableTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cWithKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSymAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSymVarDefCrossReference_6_0 = (CrossReference)cSymAssignment_6.eContents().get(0);
		private final RuleCall cSymVarDefIDTerminalRuleCall_6_0_1 = (RuleCall)cSymVarDefCrossReference_6_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cExpressionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cExpressionVariableDefCrossReference_8_0 = (CrossReference)cExpressionAssignment_8.eContents().get(0);
		private final RuleCall cExpressionVariableDefIDTerminalRuleCall_8_0_1 = (RuleCall)cExpressionVariableDefCrossReference_8_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//SharedArrayDef:
		//	'shared-val' replicas?='replicas'? name=ID ':' type=VariableType 'with' sym=[VarDef] '='
		//	expression=[VariableDef] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'shared-val' replicas?='replicas'? name=ID ':' type=VariableType 'with' sym=[VarDef] '=' expression=[VariableDef] ';'
		public Group getGroup() { return cGroup; }
		
		//'shared-val'
		public Keyword getSharedValKeyword_0() { return cSharedValKeyword_0; }
		
		//replicas?='replicas'?
		public Assignment getReplicasAssignment_1() { return cReplicasAssignment_1; }
		
		//'replicas'
		public Keyword getReplicasReplicasKeyword_1_0() { return cReplicasReplicasKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type=VariableType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_4_0() { return cTypeVariableTypeParserRuleCall_4_0; }
		
		//'with'
		public Keyword getWithKeyword_5() { return cWithKeyword_5; }
		
		//sym=[VarDef]
		public Assignment getSymAssignment_6() { return cSymAssignment_6; }
		
		//[VarDef]
		public CrossReference getSymVarDefCrossReference_6_0() { return cSymVarDefCrossReference_6_0; }
		
		//ID
		public RuleCall getSymVarDefIDTerminalRuleCall_6_0_1() { return cSymVarDefIDTerminalRuleCall_6_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//expression=[VariableDef]
		public Assignment getExpressionAssignment_8() { return cExpressionAssignment_8; }
		
		//[VariableDef]
		public CrossReference getExpressionVariableDefCrossReference_8_0() { return cExpressionVariableDefCrossReference_8_0; }
		
		//ID
		public RuleCall getExpressionVariableDefIDTerminalRuleCall_8_0_1() { return cExpressionVariableDefIDTerminalRuleCall_8_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class SharedVarDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.SharedVarDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSharedValKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReplicasAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cReplicasReplicasKeyword_1_0 = (Keyword)cReplicasAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeVariableTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cWithKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSymAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSymVarDefCrossReference_6_0 = (CrossReference)cSymAssignment_6.eContents().get(0);
		private final RuleCall cSymVarDefIDTerminalRuleCall_6_0_1 = (RuleCall)cSymVarDefCrossReference_6_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cExpressionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cExpressionExpressionParserRuleCall_8_0 = (RuleCall)cExpressionAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//SharedVarDef:
		//	'shared-val' replicas?='replicas'? name=ID ':' type=VariableType 'with' sym=[VarDef] '='
		//	expression=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'shared-val' replicas?='replicas'? name=ID ':' type=VariableType 'with' sym=[VarDef] '=' expression=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//'shared-val'
		public Keyword getSharedValKeyword_0() { return cSharedValKeyword_0; }
		
		//replicas?='replicas'?
		public Assignment getReplicasAssignment_1() { return cReplicasAssignment_1; }
		
		//'replicas'
		public Keyword getReplicasReplicasKeyword_1_0() { return cReplicasReplicasKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type=VariableType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_4_0() { return cTypeVariableTypeParserRuleCall_4_0; }
		
		//'with'
		public Keyword getWithKeyword_5() { return cWithKeyword_5; }
		
		//sym=[VarDef]
		public Assignment getSymAssignment_6() { return cSymAssignment_6; }
		
		//[VarDef]
		public CrossReference getSymVarDefCrossReference_6_0() { return cSymVarDefCrossReference_6_0; }
		
		//ID
		public RuleCall getSymVarDefIDTerminalRuleCall_6_0_1() { return cSymVarDefIDTerminalRuleCall_6_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_8() { return cExpressionAssignment_8; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_8_0() { return cExpressionExpressionParserRuleCall_8_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIstypedAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cIstypedColonKeyword_1_0_0 = (Keyword)cIstypedAssignment_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeVariableTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//Parameter:
		//	name=ID (istyped?=':' type=VariableType)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (istyped?=':' type=VariableType)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(istyped?=':' type=VariableType)?
		public Group getGroup_1() { return cGroup_1; }
		
		//istyped?=':'
		public Assignment getIstypedAssignment_1_0() { return cIstypedAssignment_1_0; }
		
		//':'
		public Keyword getIstypedColonKeyword_1_0_0() { return cIstypedColonKeyword_1_0_0; }
		
		//type=VariableType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_1_1_0() { return cTypeVariableTypeParserRuleCall_1_1_0; }
	}
	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Body:
		//	{Body} '{' statements+=Statement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Body} '{' statements+=Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//{Body}
		public Action getBodyAction_0() { return cBodyAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.Block");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIsparAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cIsparLeftCurlyBracketKeyword_1_0_0 = (Keyword)cIsparAssignment_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_1_0 = (RuleCall)cStatementsAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Block:
		//	statements+=Statement | ispar?='{' statements+=Statement+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statement | ispar?='{' statements+=Statement+ '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0_0() { return cStatementsStatementParserRuleCall_0_0; }
		
		//ispar?='{' statements+=Statement+ '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//ispar?='{'
		public Assignment getIsparAssignment_1_0() { return cIsparAssignment_1_0; }
		
		//'{'
		public Keyword getIsparLeftCurlyBracketKeyword_1_0_0() { return cIsparLeftCurlyBracketKeyword_1_0_0; }
		
		//statements+=Statement+
		public Assignment getStatementsAssignment_1_1() { return cStatementsAssignment_1_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_1_0() { return cStatementsStatementParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class VariableTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.VariableType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeXClassCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeXClassQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeXClassCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIsarrayAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cIsarrayLeftSquareBracketKeyword_1_0_0 = (Keyword)cIsarrayAssignment_1_0.eContents().get(0);
		private final Assignment cInnerTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInnerTypeVariableTypeParserRuleCall_1_1_0 = (RuleCall)cInnerTypeAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//VariableType:
		//	type=[XClass|QualifiedName] (isarray?='[' innerType=VariableType ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[XClass|QualifiedName] (isarray?='[' innerType=VariableType ']')?
		public Group getGroup() { return cGroup; }
		
		//type=[XClass|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[XClass|QualifiedName]
		public CrossReference getTypeXClassCrossReference_0_0() { return cTypeXClassCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getTypeXClassQualifiedNameParserRuleCall_0_0_1() { return cTypeXClassQualifiedNameParserRuleCall_0_0_1; }
		
		//(isarray?='[' innerType=VariableType ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//isarray?='['
		public Assignment getIsarrayAssignment_1_0() { return cIsarrayAssignment_1_0; }
		
		//'['
		public Keyword getIsarrayLeftSquareBracketKeyword_1_0_0() { return cIsarrayLeftSquareBracketKeyword_1_0_0; }
		
		//innerType=VariableType
		public Assignment getInnerTypeAssignment_1_1() { return cInnerTypeAssignment_1_1; }
		
		//VariableType
		public RuleCall getInnerTypeVariableTypeParserRuleCall_1_1_0() { return cInnerTypeVariableTypeParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAsyncStatParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFinishStatParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAtStatParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSharedDefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVariableDefParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFuncVarDefParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPrintInstParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cIfStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFor2StatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cForStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cWhileStatementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cReturnStatementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cTryCatchBlockParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cAtomicStatementParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cWhenStatementParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final RuleCall cExpressionParserRuleCall_15_0 = (RuleCall)cGroup_15.eContents().get(0);
		private final Keyword cSemicolonKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		
		//Statement:
		//	AsyncStat | FinishStat | AtStat | SharedDef | VariableDef | FuncVarDef | PrintInst | IfStatement | For2Statement |
		//	ForStatement | WhileStatement | ReturnStatement | TryCatchBlock | AtomicStatement | WhenStatement | Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//AsyncStat | FinishStat | AtStat | SharedDef | VariableDef | FuncVarDef | PrintInst | IfStatement | For2Statement |
		//ForStatement | WhileStatement | ReturnStatement | TryCatchBlock | AtomicStatement | WhenStatement | Expression ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AsyncStat
		public RuleCall getAsyncStatParserRuleCall_0() { return cAsyncStatParserRuleCall_0; }
		
		//FinishStat
		public RuleCall getFinishStatParserRuleCall_1() { return cFinishStatParserRuleCall_1; }
		
		//AtStat
		public RuleCall getAtStatParserRuleCall_2() { return cAtStatParserRuleCall_2; }
		
		//SharedDef
		public RuleCall getSharedDefParserRuleCall_3() { return cSharedDefParserRuleCall_3; }
		
		//VariableDef
		public RuleCall getVariableDefParserRuleCall_4() { return cVariableDefParserRuleCall_4; }
		
		//FuncVarDef
		public RuleCall getFuncVarDefParserRuleCall_5() { return cFuncVarDefParserRuleCall_5; }
		
		//PrintInst
		public RuleCall getPrintInstParserRuleCall_6() { return cPrintInstParserRuleCall_6; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_7() { return cIfStatementParserRuleCall_7; }
		
		//For2Statement
		public RuleCall getFor2StatementParserRuleCall_8() { return cFor2StatementParserRuleCall_8; }
		
		//ForStatement
		public RuleCall getForStatementParserRuleCall_9() { return cForStatementParserRuleCall_9; }
		
		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_10() { return cWhileStatementParserRuleCall_10; }
		
		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_11() { return cReturnStatementParserRuleCall_11; }
		
		//TryCatchBlock
		public RuleCall getTryCatchBlockParserRuleCall_12() { return cTryCatchBlockParserRuleCall_12; }
		
		//AtomicStatement
		public RuleCall getAtomicStatementParserRuleCall_13() { return cAtomicStatementParserRuleCall_13; }
		
		//WhenStatement
		public RuleCall getWhenStatementParserRuleCall_14() { return cWhenStatementParserRuleCall_14; }
		
		//Expression ';'
		public Group getGroup_15() { return cGroup_15; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_15_0() { return cExpressionParserRuleCall_15_0; }
		
		//';'
		public Keyword getSemicolonKeyword_15_1() { return cSemicolonKeyword_15_1; }
	}
	public class AsyncStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.AsyncStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsyncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyBlockParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//AsyncStat:
		//	'async' body=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'async' body=Block
		public Group getGroup() { return cGroup; }
		
		//'async'
		public Keyword getAsyncKeyword_0() { return cAsyncKeyword_0; }
		
		//body=Block
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_1_0() { return cBodyBlockParserRuleCall_1_0; }
	}
	public class FinishStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.FinishStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFinishKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyBlockParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//FinishStat:
		//	'finish' body=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'finish' body=Block
		public Group getGroup() { return cGroup; }
		
		//'finish'
		public Keyword getFinishKeyword_0() { return cFinishKeyword_0; }
		
		//body=Block
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_1_0() { return cBodyBlockParserRuleCall_1_0; }
	}
	public class AtStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.AtStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpSelectionExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyBlockParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//AtStat:
		//	'at' '(' exp=SelectionExpression ')' body=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'at' '(' exp=SelectionExpression ')' body=Block
		public Group getGroup() { return cGroup; }
		
		//'at'
		public Keyword getAtKeyword_0() { return cAtKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exp=SelectionExpression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//SelectionExpression
		public RuleCall getExpSelectionExpressionParserRuleCall_2_0() { return cExpSelectionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//body=Block
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_4_0() { return cBodyBlockParserRuleCall_4_0; }
	}
	public class AtomicStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.AtomicStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAtomicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		
		//AtomicStatement:
		//	'atomic' statement=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//'atomic' statement=Statement
		public Group getGroup() { return cGroup; }
		
		//'atomic'
		public Keyword getAtomicKeyword_0() { return cAtomicKeyword_0; }
		
		//statement=Statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }
	}
	public class WhenStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.WhenStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionEqualityParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		
		//WhenStatement:
		//	'when' '(' expression=Equality ')' statement=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//'when' '(' expression=Equality ')' statement=Statement
		public Group getGroup() { return cGroup; }
		
		//'when'
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Equality
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Equality
		public RuleCall getExpressionEqualityParserRuleCall_2_0() { return cExpressionEqualityParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//statement=Statement
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_0() { return cStatementStatementParserRuleCall_4_0; }
	}
	public class For2StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.For2Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParParameterParserRuleCall_2_0 = (RuleCall)cParAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDataAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDataTerminalExpressionParserRuleCall_4_0 = (RuleCall)cDataAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyBlockParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//For2Statement:
		//	'for' '(' par=Parameter 'in' data=TerminalExpression ')'
		//	body=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' '(' par=Parameter 'in' data=TerminalExpression ')' body=Block
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//par=Parameter
		public Assignment getParAssignment_2() { return cParAssignment_2; }
		
		//Parameter
		public RuleCall getParParameterParserRuleCall_2_0() { return cParParameterParserRuleCall_2_0; }
		
		//'in'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//data=TerminalExpression
		public Assignment getDataAssignment_4() { return cDataAssignment_4; }
		
		//TerminalExpression
		public RuleCall getDataTerminalExpressionParserRuleCall_4_0() { return cDataTerminalExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//body=Block
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_6_0() { return cBodyBlockParserRuleCall_6_0; }
	}
	public class TryCatchBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.TryCatchBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTryCatchStatAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyTryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyTryBodyParserRuleCall_2_0 = (RuleCall)cBodyTryAssignment_2.eContents().get(0);
		private final Keyword cCatchKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyCatchAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyCatchBodyParserRuleCall_7_0 = (RuleCall)cBodyCatchAssignment_7.eContents().get(0);
		
		//TryCatchBlock Statement:
		//	{TryCatchStat} 'try'
		//	bodyTry=Body
		//	'catch' '(' name=ID ')'
		//	bodyCatch=Body
		@Override public ParserRule getRule() { return rule; }
		
		//{TryCatchStat} 'try' bodyTry=Body 'catch' '(' name=ID ')' bodyCatch=Body
		public Group getGroup() { return cGroup; }
		
		//{TryCatchStat}
		public Action getTryCatchStatAction_0() { return cTryCatchStatAction_0; }
		
		//'try'
		public Keyword getTryKeyword_1() { return cTryKeyword_1; }
		
		//bodyTry=Body
		public Assignment getBodyTryAssignment_2() { return cBodyTryAssignment_2; }
		
		//Body
		public RuleCall getBodyTryBodyParserRuleCall_2_0() { return cBodyTryBodyParserRuleCall_2_0; }
		
		//'catch'
		public Keyword getCatchKeyword_3() { return cCatchKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//bodyCatch=Body
		public Assignment getBodyCatchAssignment_7() { return cBodyCatchAssignment_7; }
		
		//Body
		public RuleCall getBodyCatchBodyParserRuleCall_7_0() { return cBodyCatchBodyParserRuleCall_7_0; }
	}
	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileStatAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyBodyParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//WhileStatement Statement:
		//	{WhileStat} 'while' '(' expression=Expression ')'
		//	body=Body
		@Override public ParserRule getRule() { return rule; }
		
		//{WhileStat} 'while' '(' expression=Expression ')' body=Body
		public Group getGroup() { return cGroup; }
		
		//{WhileStat}
		public Action getWhileStatAction_0() { return cWhileStatAction_0; }
		
		//'while'
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//body=Body
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_5_0() { return cBodyBodyParserRuleCall_5_0; }
	}
	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForStatAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTempAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTempVariableDefParserRuleCall_3_0 = (RuleCall)cTempAssignment_3.eContents().get(0);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionArithExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFinalexpAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFinalexpExpressionParserRuleCall_6_0 = (RuleCall)cFinalexpAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyBlockParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		
		//ForStatement Statement:
		//	{ForStat} 'for' '(' temp=VariableDef condition=ArithExpression ';' finalexp=Expression ')'
		//	body=Block
		@Override public ParserRule getRule() { return rule; }
		
		//{ForStat} 'for' '(' temp=VariableDef condition=ArithExpression ';' finalexp=Expression ')' body=Block
		public Group getGroup() { return cGroup; }
		
		//{ForStat}
		public Action getForStatAction_0() { return cForStatAction_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//temp=VariableDef
		public Assignment getTempAssignment_3() { return cTempAssignment_3; }
		
		//VariableDef
		public RuleCall getTempVariableDefParserRuleCall_3_0() { return cTempVariableDefParserRuleCall_3_0; }
		
		//condition=ArithExpression
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//ArithExpression
		public RuleCall getConditionArithExpressionParserRuleCall_4_0() { return cConditionArithExpressionParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//finalexp=Expression
		public Assignment getFinalexpAssignment_6() { return cFinalexpAssignment_6; }
		
		//Expression
		public RuleCall getFinalexpExpressionParserRuleCall_6_0() { return cFinalexpExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//body=Block
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_8_0() { return cBodyBlockParserRuleCall_8_0; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStatAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ReturnStatement Statement:
		//	{ReturnStat} 'return' expression=Expression ';'
		@Override public ParserRule getRule() { return rule; }
		
		//{ReturnStat} 'return' expression=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//{ReturnStat}
		public Action getReturnStatAction_0() { return cReturnStatAction_0; }
		
		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class VarDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.VarDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSharedDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParameterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFuncVarDefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXClassParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVariableTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//VarDef:
		//	SharedDef | VariableDef | Parameter | FuncVarDef | XClass | VariableType;
		@Override public ParserRule getRule() { return rule; }
		
		//SharedDef | VariableDef | Parameter | FuncVarDef | XClass | VariableType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SharedDef
		public RuleCall getSharedDefParserRuleCall_0() { return cSharedDefParserRuleCall_0; }
		
		//VariableDef
		public RuleCall getVariableDefParserRuleCall_1() { return cVariableDefParserRuleCall_1; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_2() { return cParameterParserRuleCall_2; }
		
		//FuncVarDef
		public RuleCall getFuncVarDefParserRuleCall_3() { return cFuncVarDefParserRuleCall_3; }
		
		//XClass
		public RuleCall getXClassParserRuleCall_4() { return cXClassParserRuleCall_4; }
		
		//VariableType
		public RuleCall getVariableTypeParserRuleCall_5() { return cVariableTypeParserRuleCall_5; }
	}
	public class SharedDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.SharedDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSharedArrayDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSharedVarDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SharedDef:
		//	=> SharedArrayDef | SharedVarDef;
		@Override public ParserRule getRule() { return rule; }
		
		//=> SharedArrayDef | SharedVarDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> SharedArrayDef
		public RuleCall getSharedArrayDefParserRuleCall_0() { return cSharedArrayDefParserRuleCall_0; }
		
		//SharedVarDef
		public RuleCall getSharedVarDefParserRuleCall_1() { return cSharedVarDefParserRuleCall_1; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfStatAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionArithExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenBlockBlockParserRuleCall_5_0 = (RuleCall)cThenBlockAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cIselseAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cIselseElseKeyword_6_0_0 = (Keyword)cIselseAssignment_6_0.eContents().get(0);
		private final Assignment cElseBlockAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseBlockBlockParserRuleCall_6_1_0 = (RuleCall)cElseBlockAssignment_6_1.eContents().get(0);
		
		//IfStatement Statement:
		//	{IfStat} 'if' '(' expression=ArithExpression ')' thenBlock=Block (=> iselse?='else' elseBlock=Block)?
		@Override public ParserRule getRule() { return rule; }
		
		//{IfStat} 'if' '(' expression=ArithExpression ')' thenBlock=Block (=> iselse?='else' elseBlock=Block)?
		public Group getGroup() { return cGroup; }
		
		//{IfStat}
		public Action getIfStatAction_0() { return cIfStatAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//expression=ArithExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//ArithExpression
		public RuleCall getExpressionArithExpressionParserRuleCall_3_0() { return cExpressionArithExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//thenBlock=Block
		public Assignment getThenBlockAssignment_5() { return cThenBlockAssignment_5; }
		
		//Block
		public RuleCall getThenBlockBlockParserRuleCall_5_0() { return cThenBlockBlockParserRuleCall_5_0; }
		
		//(=> iselse?='else' elseBlock=Block)?
		public Group getGroup_6() { return cGroup_6; }
		
		//=> iselse?='else'
		public Assignment getIselseAssignment_6_0() { return cIselseAssignment_6_0; }
		
		//'else'
		public Keyword getIselseElseKeyword_6_0_0() { return cIselseElseKeyword_6_0_0; }
		
		//elseBlock=Block
		public Assignment getElseBlockAssignment_6_1() { return cElseBlockAssignment_6_1; }
		
		//Block
		public RuleCall getElseBlockBlockParserRuleCall_6_1_0() { return cElseBlockBlockParserRuleCall_6_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.Expression");
		private final RuleCall cAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Assignment;
		@Override public ParserRule getRule() { return rule; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall() { return cAssignmentParserRuleCall; }
	}
	public class ArithExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.ArithExpression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ArithExpression Expression:
		//	Or
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSelectionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAssignmentLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightArithExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Assignment Expression:
		//	SelectionExpression ({Assignment.left=current} '=' right=ArithExpression)?
		@Override public ParserRule getRule() { return rule; }
		
		//SelectionExpression ({Assignment.left=current} '=' right=ArithExpression)?
		public Group getGroup() { return cGroup; }
		
		//SelectionExpression
		public RuleCall getSelectionExpressionParserRuleCall_0() { return cSelectionExpressionParserRuleCall_0; }
		
		//({Assignment.left=current} '=' right=ArithExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Assignment.left=current}
		public Action getAssignmentLeftAction_1_0() { return cAssignmentLeftAction_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//right=ArithExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ArithExpression
		public RuleCall getRightArithExpressionParserRuleCall_1_2_0() { return cRightArithExpressionParserRuleCall_1_2_0; }
	}
	public class SelectionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.SelectionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMemberSelectionReceiverAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMemberAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cMemberMemberCrossReference_1_2_0 = (CrossReference)cMemberAssignment_1_2.eContents().get(0);
		private final RuleCall cMemberMemberIDTerminalRuleCall_1_2_0_1 = (RuleCall)cMemberMemberCrossReference_1_2_0.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cIsparAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final Keyword cIsparLeftSquareBracketKeyword_1_3_0_0 = (Keyword)cIsparAssignment_1_3_0.eContents().get(0);
		private final Assignment cParAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final CrossReference cParXClassCrossReference_1_3_1_0 = (CrossReference)cParAssignment_1_3_1.eContents().get(0);
		private final RuleCall cParXClassIDTerminalRuleCall_1_3_1_0_1 = (RuleCall)cParXClassCrossReference_1_3_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Assignment cMethodinvocationAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final Keyword cMethodinvocationLeftParenthesisKeyword_1_4_0_0 = (Keyword)cMethodinvocationAssignment_1_4_0.eContents().get(0);
		private final Group cGroup_1_4_1 = (Group)cGroup_1_4.eContents().get(1);
		private final Assignment cArgsAssignment_1_4_1_0 = (Assignment)cGroup_1_4_1.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_1_4_1_0_0 = (RuleCall)cArgsAssignment_1_4_1_0.eContents().get(0);
		private final Group cGroup_1_4_1_1 = (Group)cGroup_1_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_4_1_1_0 = (Keyword)cGroup_1_4_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_4_1_1_1 = (Assignment)cGroup_1_4_1_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_1_4_1_1_1_0 = (RuleCall)cArgsAssignment_1_4_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4_2 = (Keyword)cGroup_1_4.eContents().get(2);
		
		//SelectionExpression Expression:
		//	TerminalExpression ({MemberSelection.receiver=current}
		//	'.' member=[Member] (ispar?='[' par=[XClass] ']')? (methodinvocation?='(' (args+=Expression (',' args+=Expression)*)?
		//	')')?)*
		@Override public ParserRule getRule() { return rule; }
		
		//TerminalExpression ({MemberSelection.receiver=current} '.' member=[Member] (ispar?='[' par=[XClass] ']')?
		//(methodinvocation?='(' (args+=Expression (',' args+=Expression)*)? ')')?)*
		public Group getGroup() { return cGroup; }
		
		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }
		
		//({MemberSelection.receiver=current} '.' member=[Member] (ispar?='[' par=[XClass] ']')? (methodinvocation?='('
		//(args+=Expression (',' args+=Expression)*)? ')')?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MemberSelection.receiver=current}
		public Action getMemberSelectionReceiverAction_1_0() { return cMemberSelectionReceiverAction_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//member=[Member]
		public Assignment getMemberAssignment_1_2() { return cMemberAssignment_1_2; }
		
		//[Member]
		public CrossReference getMemberMemberCrossReference_1_2_0() { return cMemberMemberCrossReference_1_2_0; }
		
		//ID
		public RuleCall getMemberMemberIDTerminalRuleCall_1_2_0_1() { return cMemberMemberIDTerminalRuleCall_1_2_0_1; }
		
		//(ispar?='[' par=[XClass] ']')?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//ispar?='['
		public Assignment getIsparAssignment_1_3_0() { return cIsparAssignment_1_3_0; }
		
		//'['
		public Keyword getIsparLeftSquareBracketKeyword_1_3_0_0() { return cIsparLeftSquareBracketKeyword_1_3_0_0; }
		
		//par=[XClass]
		public Assignment getParAssignment_1_3_1() { return cParAssignment_1_3_1; }
		
		//[XClass]
		public CrossReference getParXClassCrossReference_1_3_1_0() { return cParXClassCrossReference_1_3_1_0; }
		
		//ID
		public RuleCall getParXClassIDTerminalRuleCall_1_3_1_0_1() { return cParXClassIDTerminalRuleCall_1_3_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3_2() { return cRightSquareBracketKeyword_1_3_2; }
		
		//(methodinvocation?='(' (args+=Expression (',' args+=Expression)*)? ')')?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//methodinvocation?='('
		public Assignment getMethodinvocationAssignment_1_4_0() { return cMethodinvocationAssignment_1_4_0; }
		
		//'('
		public Keyword getMethodinvocationLeftParenthesisKeyword_1_4_0_0() { return cMethodinvocationLeftParenthesisKeyword_1_4_0_0; }
		
		//(args+=Expression (',' args+=Expression)*)?
		public Group getGroup_1_4_1() { return cGroup_1_4_1; }
		
		//args+=Expression
		public Assignment getArgsAssignment_1_4_1_0() { return cArgsAssignment_1_4_1_0; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_4_1_0_0() { return cArgsExpressionParserRuleCall_1_4_1_0_0; }
		
		//(',' args+=Expression)*
		public Group getGroup_1_4_1_1() { return cGroup_1_4_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_4_1_1_0() { return cCommaKeyword_1_4_1_1_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_1_4_1_1_1() { return cArgsAssignment_1_4_1_1_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_4_1_1_1_0() { return cArgsExpressionParserRuleCall_1_4_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4_2() { return cRightParenthesisKeyword_1_4_2; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Expression:
		//	And ({Or.left=current} '||' right=And)*
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} '||' right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} '||' right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Expression:
		//	Equality ({And.left=current} '&&' right=Equality)*
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({And.left=current} '&&' right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.left=current} '&&' right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality Expression:
		//	Comparison ({Equality.left=current} op=('==' | '!=') right=Comparison)*
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} op=('==' | '!=') right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} op=('==' | '!=') right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//op=('==' | '!=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('==' | '!=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpLessThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison Expression:
		//	PlusOrMinus ({Comparison.left=current} op=('<=' | '>=' | '<' | '>') right=PlusOrMinus)*
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus ({Comparison.left=current} op=('<=' | '>=' | '<' | '>') right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//({Comparison.left=current} op=('<=' | '>=' | '<' | '>') right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//op=('<=' | '>=' | '<' | '>')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('<=' | '>=' | '<' | '>')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_0() { return cOpLessThanSignEqualsSignKeyword_1_1_0_0; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_1() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_1; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_1_0_2() { return cOpLessThanSignKeyword_1_1_0_2; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_1_0_3() { return cOpGreaterThanSignKeyword_1_1_0_3; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus Expression:
		//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} '+' | {Minus.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulOrDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulOrDiv Expression:
		//	Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({MulOrDiv.left=current} op=('*' | '/') right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulOrDiv.left=current}
		public Action getMulOrDivLeftAction_1_0() { return cMulOrDivLeftAction_1_0; }
		
		//op=('*' | '/')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cSelectionExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary Expression:
		//	'(' Expression ')' | {Not} '!' expression=Primary | SelectionExpression
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | {Not} '!' expression=Primary | SelectionExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Not} '!' expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
		
		//SelectionExpression
		public RuleCall getSelectionExpressionParserRuleCall_2() { return cSelectionExpressionParserRuleCall_2; }
	}
	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStringConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueIntegerNegativeParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cDeRefAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cRefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRefVarDefCrossReference_3_1_0 = (CrossReference)cRefAssignment_3_1.eContents().get(0);
		private final RuleCall cRefVarDefIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRefVarDefCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cThisAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cThisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cNullAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cNullKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cHereAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cHereKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cReferenceAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cBaseAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cBaseVarDefCrossReference_7_1_0 = (CrossReference)cBaseAssignment_7_1.eContents().get(0);
		private final RuleCall cBaseVarDefIDTerminalRuleCall_7_1_0_1 = (RuleCall)cBaseVarDefCrossReference_7_1_0.eContents().get(1);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Assignment cIsarrayAssignment_7_2_0 = (Assignment)cGroup_7_2.eContents().get(0);
		private final Keyword cIsarrayLeftParenthesisKeyword_7_2_0_0 = (Keyword)cIsarrayAssignment_7_2_0.eContents().get(0);
		private final Assignment cParamsAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cParamsSelectionExpressionParserRuleCall_7_2_1_0 = (RuleCall)cParamsAssignment_7_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_2_2 = (Keyword)cGroup_7_2.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cNewAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cNewKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cTypeAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cTypeVariableTypeParserRuleCall_8_2_0 = (RuleCall)cTypeAssignment_8_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Group cGroup_8_4 = (Group)cGroup_8.eContents().get(4);
		private final Assignment cArgsAssignment_8_4_0 = (Assignment)cGroup_8_4.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_8_4_0_0 = (RuleCall)cArgsAssignment_8_4_0.eContents().get(0);
		private final Group cGroup_8_4_1 = (Group)cGroup_8_4.eContents().get(1);
		private final Keyword cCommaKeyword_8_4_1_0 = (Keyword)cGroup_8_4_1.eContents().get(0);
		private final Assignment cArgsAssignment_8_4_1_1 = (Assignment)cGroup_8_4_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_8_4_1_1_0 = (RuleCall)cArgsAssignment_8_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_5 = (Keyword)cGroup_8.eContents().get(5);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cInitAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cTypeAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cTypeVariableTypeParserRuleCall_9_2_0 = (RuleCall)cTypeAssignment_9_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Keyword cEqualsSignGreaterThanSignKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Assignment cExpressionAssignment_9_5 = (Assignment)cGroup_9.eContents().get(5);
		private final RuleCall cExpressionTerminalExpressionParserRuleCall_9_5_0 = (RuleCall)cExpressionAssignment_9_5.eContents().get(0);
		
		//TerminalExpression Expression:
		//	{StringConstant} value=STRING | {IntConstant} value=IntegerNegative | {BoolConstant} value=('true' | 'false') |
		//	{DeRef} ref=[VarDef] '(' ')' | {This} 'this' | {Null} 'null' | {Here} 'here' | {Reference} base=[VarDef] (isarray?='('
		//	params+=SelectionExpression ')')? | {New} 'new' type=VariableType '(' (args+=Expression (',' args+=Expression)*)? ')'
		//	| {Init} '(' type=VariableType ')' '=>' expression=TerminalExpression
		@Override public ParserRule getRule() { return rule; }
		
		//{StringConstant} value=STRING | {IntConstant} value=IntegerNegative | {BoolConstant} value=('true' | 'false') | {DeRef}
		//ref=[VarDef] '(' ')' | {This} 'this' | {Null} 'null' | {Here} 'here' | {Reference} base=[VarDef] (isarray?='('
		//params+=SelectionExpression ')')? | {New} 'new' type=VariableType '(' (args+=Expression (',' args+=Expression)*)? ')' |
		//{Init} '(' type=VariableType ')' '=>' expression=TerminalExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{StringConstant} value=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//{StringConstant}
		public Action getStringConstantAction_0_0() { return cStringConstantAction_0_0; }
		
		//value=STRING
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0() { return cValueSTRINGTerminalRuleCall_0_1_0; }
		
		//{IntConstant} value=IntegerNegative
		public Group getGroup_1() { return cGroup_1; }
		
		//{IntConstant}
		public Action getIntConstantAction_1_0() { return cIntConstantAction_1_0; }
		
		//value=IntegerNegative
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//IntegerNegative
		public RuleCall getValueIntegerNegativeParserRuleCall_1_1_0() { return cValueIntegerNegativeParserRuleCall_1_1_0; }
		
		//{BoolConstant} value=('true' | 'false')
		public Group getGroup_2() { return cGroup_2; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_2_0() { return cBoolConstantAction_2_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }
		
		//{DeRef} ref=[VarDef] '(' ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//{DeRef}
		public Action getDeRefAction_3_0() { return cDeRefAction_3_0; }
		
		//ref=[VarDef]
		public Assignment getRefAssignment_3_1() { return cRefAssignment_3_1; }
		
		//[VarDef]
		public CrossReference getRefVarDefCrossReference_3_1_0() { return cRefVarDefCrossReference_3_1_0; }
		
		//ID
		public RuleCall getRefVarDefIDTerminalRuleCall_3_1_0_1() { return cRefVarDefIDTerminalRuleCall_3_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//{This} 'this'
		public Group getGroup_4() { return cGroup_4; }
		
		//{This}
		public Action getThisAction_4_0() { return cThisAction_4_0; }
		
		//'this'
		public Keyword getThisKeyword_4_1() { return cThisKeyword_4_1; }
		
		//{Null} 'null'
		public Group getGroup_5() { return cGroup_5; }
		
		//{Null}
		public Action getNullAction_5_0() { return cNullAction_5_0; }
		
		//'null'
		public Keyword getNullKeyword_5_1() { return cNullKeyword_5_1; }
		
		//{Here} 'here'
		public Group getGroup_6() { return cGroup_6; }
		
		//{Here}
		public Action getHereAction_6_0() { return cHereAction_6_0; }
		
		//'here'
		public Keyword getHereKeyword_6_1() { return cHereKeyword_6_1; }
		
		//{Reference} base=[VarDef] (isarray?='(' params+=SelectionExpression ')')?
		public Group getGroup_7() { return cGroup_7; }
		
		//{Reference}
		public Action getReferenceAction_7_0() { return cReferenceAction_7_0; }
		
		//base=[VarDef]
		public Assignment getBaseAssignment_7_1() { return cBaseAssignment_7_1; }
		
		//[VarDef]
		public CrossReference getBaseVarDefCrossReference_7_1_0() { return cBaseVarDefCrossReference_7_1_0; }
		
		//ID
		public RuleCall getBaseVarDefIDTerminalRuleCall_7_1_0_1() { return cBaseVarDefIDTerminalRuleCall_7_1_0_1; }
		
		//(isarray?='(' params+=SelectionExpression ')')?
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//isarray?='('
		public Assignment getIsarrayAssignment_7_2_0() { return cIsarrayAssignment_7_2_0; }
		
		//'('
		public Keyword getIsarrayLeftParenthesisKeyword_7_2_0_0() { return cIsarrayLeftParenthesisKeyword_7_2_0_0; }
		
		//params+=SelectionExpression
		public Assignment getParamsAssignment_7_2_1() { return cParamsAssignment_7_2_1; }
		
		//SelectionExpression
		public RuleCall getParamsSelectionExpressionParserRuleCall_7_2_1_0() { return cParamsSelectionExpressionParserRuleCall_7_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_2_2() { return cRightParenthesisKeyword_7_2_2; }
		
		//{New} 'new' type=VariableType '(' (args+=Expression (',' args+=Expression)*)? ')'
		public Group getGroup_8() { return cGroup_8; }
		
		//{New}
		public Action getNewAction_8_0() { return cNewAction_8_0; }
		
		//'new'
		public Keyword getNewKeyword_8_1() { return cNewKeyword_8_1; }
		
		//type=VariableType
		public Assignment getTypeAssignment_8_2() { return cTypeAssignment_8_2; }
		
		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_8_2_0() { return cTypeVariableTypeParserRuleCall_8_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_3() { return cLeftParenthesisKeyword_8_3; }
		
		//(args+=Expression (',' args+=Expression)*)?
		public Group getGroup_8_4() { return cGroup_8_4; }
		
		//args+=Expression
		public Assignment getArgsAssignment_8_4_0() { return cArgsAssignment_8_4_0; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_8_4_0_0() { return cArgsExpressionParserRuleCall_8_4_0_0; }
		
		//(',' args+=Expression)*
		public Group getGroup_8_4_1() { return cGroup_8_4_1; }
		
		//','
		public Keyword getCommaKeyword_8_4_1_0() { return cCommaKeyword_8_4_1_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_8_4_1_1() { return cArgsAssignment_8_4_1_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_8_4_1_1_0() { return cArgsExpressionParserRuleCall_8_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_5() { return cRightParenthesisKeyword_8_5; }
		
		//{Init} '(' type=VariableType ')' '=>' expression=TerminalExpression
		public Group getGroup_9() { return cGroup_9; }
		
		//{Init}
		public Action getInitAction_9_0() { return cInitAction_9_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }
		
		//type=VariableType
		public Assignment getTypeAssignment_9_2() { return cTypeAssignment_9_2; }
		
		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_9_2_0() { return cTypeVariableTypeParserRuleCall_9_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9_3() { return cRightParenthesisKeyword_9_3; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_9_4() { return cEqualsSignGreaterThanSignKeyword_9_4; }
		
		//expression=TerminalExpression
		public Assignment getExpressionAssignment_9_5() { return cExpressionAssignment_9_5; }
		
		//TerminalExpression
		public RuleCall getExpressionTerminalExpressionParserRuleCall_9_5_0() { return cExpressionTerminalExpressionParserRuleCall_9_5_0; }
	}
	public class IntegerNegativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.ADSL.IntegerNegative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsnegAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsnegHyphenMinusKeyword_0_0 = (Keyword)cIsnegAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntegerNegative:
		//	isneg?='-'? value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//isneg?='-'? value=INT
		public Group getGroup() { return cGroup; }
		
		//isneg?='-'?
		public Assignment getIsnegAssignment_0() { return cIsnegAssignment_0; }
		
		//'-'
		public Keyword getIsnegHyphenMinusKeyword_0_0() { return cIsnegHyphenMinusKeyword_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final AbstractElementsElements pAbstractElements;
	private final ImportElementsElements pImportElements;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final QualifiedNameElements pQualifiedName;
	private final XClassElements pXClass;
	private final MemberElements pMember;
	private final MainMethodElements pMainMethod;
	private final PrintInstElements pPrintInst;
	private final MethodElements pMethod;
	private final OperatorElements pOperator;
	private final FuncVarDefElements pFuncVarDef;
	private final VariableDefElements pVariableDef;
	private final SharedArrayDefElements pSharedArrayDef;
	private final SharedVarDefElements pSharedVarDef;
	private final ParameterElements pParameter;
	private final BodyElements pBody;
	private final BlockElements pBlock;
	private final VariableTypeElements pVariableType;
	private final StatementElements pStatement;
	private final AsyncStatElements pAsyncStat;
	private final FinishStatElements pFinishStat;
	private final AtStatElements pAtStat;
	private final AtomicStatementElements pAtomicStatement;
	private final WhenStatementElements pWhenStatement;
	private final For2StatementElements pFor2Statement;
	private final TryCatchBlockElements pTryCatchBlock;
	private final WhileStatementElements pWhileStatement;
	private final ForStatementElements pForStatement;
	private final ReturnStatementElements pReturnStatement;
	private final VarDefElements pVarDef;
	private final SharedDefElements pSharedDef;
	private final IfStatementElements pIfStatement;
	private final ExpressionElements pExpression;
	private final ArithExpressionElements pArithExpression;
	private final AssignmentElements pAssignment;
	private final SelectionExpressionElements pSelectionExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MulOrDivElements pMulOrDiv;
	private final PrimaryElements pPrimary;
	private final TerminalExpressionElements pTerminalExpression;
	private final IntegerNegativeElements pIntegerNegative;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ADSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pAbstractElements = new AbstractElementsElements();
		this.pImportElements = new ImportElementsElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pXClass = new XClassElements();
		this.pMember = new MemberElements();
		this.pMainMethod = new MainMethodElements();
		this.pPrintInst = new PrintInstElements();
		this.pMethod = new MethodElements();
		this.pOperator = new OperatorElements();
		this.pFuncVarDef = new FuncVarDefElements();
		this.pVariableDef = new VariableDefElements();
		this.pSharedArrayDef = new SharedArrayDefElements();
		this.pSharedVarDef = new SharedVarDefElements();
		this.pParameter = new ParameterElements();
		this.pBody = new BodyElements();
		this.pBlock = new BlockElements();
		this.pVariableType = new VariableTypeElements();
		this.pStatement = new StatementElements();
		this.pAsyncStat = new AsyncStatElements();
		this.pFinishStat = new FinishStatElements();
		this.pAtStat = new AtStatElements();
		this.pAtomicStatement = new AtomicStatementElements();
		this.pWhenStatement = new WhenStatementElements();
		this.pFor2Statement = new For2StatementElements();
		this.pTryCatchBlock = new TryCatchBlockElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pForStatement = new ForStatementElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pVarDef = new VarDefElements();
		this.pSharedDef = new SharedDefElements();
		this.pIfStatement = new IfStatementElements();
		this.pExpression = new ExpressionElements();
		this.pArithExpression = new ArithExpressionElements();
		this.pAssignment = new AssignmentElements();
		this.pSelectionExpression = new SelectionExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pPrimary = new PrimaryElements();
		this.pTerminalExpression = new TerminalExpressionElements();
		this.pIntegerNegative = new IntegerNegativeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl1.ADSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * Loose grammar approach - validation should be strict
	// * / Program:
	//	('package' name=QualifiedName ';')?
	//	importElements+=AbstractElements*
	//	xclass+=XClass*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//AbstractElements:
	//	'import' importedNamespace=QualifiedNameWithWildcard ';';
	public AbstractElementsElements getAbstractElementsAccess() {
		return pAbstractElements;
	}
	
	public ParserRule getAbstractElementsRule() {
		return getAbstractElementsAccess().getRule();
	}
	
	//ImportElements:
	//	ID ('.' ID)*;
	public ImportElementsElements getImportElementsAccess() {
		return pImportElements;
	}
	
	public ParserRule getImportElementsRule() {
		return getImportElementsAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//XClass:
	//	'public' 'class' name=ID ('extends' superclass=[XClass|QualifiedName])?
	//	'{'
	//	members+=Member*
	//	'}';
	public XClassElements getXClassAccess() {
		return pXClass;
	}
	
	public ParserRule getXClassRule() {
		return getXClassAccess().getRule();
	}
	
	//Member:
	//	VariableDef | SharedDef | FuncVarDef | Method | Operator | PrintInst | MainMethod;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//MainMethod:
	//	'public' 'static' 'def' 'main' '(' type=VariableType ')'
	//	body=Body;
	public MainMethodElements getMainMethodAccess() {
		return pMainMethod;
	}
	
	public ParserRule getMainMethodRule() {
		return getMainMethodAccess().getRule();
	}
	
	//PrintInst:
	//	'Console' ('.' ID)* '(' expression=Expression ')' ';';
	public PrintInstElements getPrintInstAccess() {
		return pPrintInst;
	}
	
	public ParserRule getPrintInstRule() {
		return getPrintInstAccess().getRule();
	}
	
	//Method:
	//	'def' isconst?='const'? name=(ID | 'this') '(' (params+=Parameter (',' params+=Parameter)*)? ')' (istyped?=':'
	//	type=VariableType)?
	//	body=Body;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Operator:
	//	'public' 'operator' opName=(ID | 'this')
	//	'(' (params+=Parameter (',' params+=Parameter)*)? ')'
	//	'=' expression=Expression ';';
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//FuncVarDef:
	//	'val' name=ID ':' '(' (params+=Parameter (',' params+=Parameter)*)? ')'
	//	'=>' type=VariableType '=' '(' (params+=Parameter (',' params+=Parameter)*)? ')'
	//	'=>' body=Body ';';
	public FuncVarDefElements getFuncVarDefAccess() {
		return pFuncVarDef;
	}
	
	public ParserRule getFuncVarDefRule() {
		return getFuncVarDefAccess().getRule();
	}
	
	//VariableDef:
	//	isstatic?='static'? vartype=('var' | 'val') name=ID (istyped?=':' type=VariableType)? (isinit?='='
	//	expression=ArithExpression)? ';';
	public VariableDefElements getVariableDefAccess() {
		return pVariableDef;
	}
	
	public ParserRule getVariableDefRule() {
		return getVariableDefAccess().getRule();
	}
	
	//SharedArrayDef:
	//	'shared-val' replicas?='replicas'? name=ID ':' type=VariableType 'with' sym=[VarDef] '='
	//	expression=[VariableDef] ';';
	public SharedArrayDefElements getSharedArrayDefAccess() {
		return pSharedArrayDef;
	}
	
	public ParserRule getSharedArrayDefRule() {
		return getSharedArrayDefAccess().getRule();
	}
	
	//SharedVarDef:
	//	'shared-val' replicas?='replicas'? name=ID ':' type=VariableType 'with' sym=[VarDef] '='
	//	expression=Expression ';';
	public SharedVarDefElements getSharedVarDefAccess() {
		return pSharedVarDef;
	}
	
	public ParserRule getSharedVarDefRule() {
		return getSharedVarDefAccess().getRule();
	}
	
	//Parameter:
	//	name=ID (istyped?=':' type=VariableType)?;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Body:
	//	{Body} '{' statements+=Statement* '}';
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}
	
	//Block:
	//	statements+=Statement | ispar?='{' statements+=Statement+ '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//VariableType:
	//	type=[XClass|QualifiedName] (isarray?='[' innerType=VariableType ']')?;
	public VariableTypeElements getVariableTypeAccess() {
		return pVariableType;
	}
	
	public ParserRule getVariableTypeRule() {
		return getVariableTypeAccess().getRule();
	}
	
	//Statement:
	//	AsyncStat | FinishStat | AtStat | SharedDef | VariableDef | FuncVarDef | PrintInst | IfStatement | For2Statement |
	//	ForStatement | WhileStatement | ReturnStatement | TryCatchBlock | AtomicStatement | WhenStatement | Expression ';';
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//AsyncStat:
	//	'async' body=Block;
	public AsyncStatElements getAsyncStatAccess() {
		return pAsyncStat;
	}
	
	public ParserRule getAsyncStatRule() {
		return getAsyncStatAccess().getRule();
	}
	
	//FinishStat:
	//	'finish' body=Block;
	public FinishStatElements getFinishStatAccess() {
		return pFinishStat;
	}
	
	public ParserRule getFinishStatRule() {
		return getFinishStatAccess().getRule();
	}
	
	//AtStat:
	//	'at' '(' exp=SelectionExpression ')' body=Block;
	public AtStatElements getAtStatAccess() {
		return pAtStat;
	}
	
	public ParserRule getAtStatRule() {
		return getAtStatAccess().getRule();
	}
	
	//AtomicStatement:
	//	'atomic' statement=Statement;
	public AtomicStatementElements getAtomicStatementAccess() {
		return pAtomicStatement;
	}
	
	public ParserRule getAtomicStatementRule() {
		return getAtomicStatementAccess().getRule();
	}
	
	//WhenStatement:
	//	'when' '(' expression=Equality ')' statement=Statement;
	public WhenStatementElements getWhenStatementAccess() {
		return pWhenStatement;
	}
	
	public ParserRule getWhenStatementRule() {
		return getWhenStatementAccess().getRule();
	}
	
	//For2Statement:
	//	'for' '(' par=Parameter 'in' data=TerminalExpression ')'
	//	body=Block;
	public For2StatementElements getFor2StatementAccess() {
		return pFor2Statement;
	}
	
	public ParserRule getFor2StatementRule() {
		return getFor2StatementAccess().getRule();
	}
	
	//TryCatchBlock Statement:
	//	{TryCatchStat} 'try'
	//	bodyTry=Body
	//	'catch' '(' name=ID ')'
	//	bodyCatch=Body
	public TryCatchBlockElements getTryCatchBlockAccess() {
		return pTryCatchBlock;
	}
	
	public ParserRule getTryCatchBlockRule() {
		return getTryCatchBlockAccess().getRule();
	}
	
	//WhileStatement Statement:
	//	{WhileStat} 'while' '(' expression=Expression ')'
	//	body=Body
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}
	
	//ForStatement Statement:
	//	{ForStat} 'for' '(' temp=VariableDef condition=ArithExpression ';' finalexp=Expression ')'
	//	body=Block
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}
	
	//ReturnStatement Statement:
	//	{ReturnStat} 'return' expression=Expression ';'
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//VarDef:
	//	SharedDef | VariableDef | Parameter | FuncVarDef | XClass | VariableType;
	public VarDefElements getVarDefAccess() {
		return pVarDef;
	}
	
	public ParserRule getVarDefRule() {
		return getVarDefAccess().getRule();
	}
	
	//SharedDef:
	//	=> SharedArrayDef | SharedVarDef;
	public SharedDefElements getSharedDefAccess() {
		return pSharedDef;
	}
	
	public ParserRule getSharedDefRule() {
		return getSharedDefAccess().getRule();
	}
	
	//IfStatement Statement:
	//	{IfStat} 'if' '(' expression=ArithExpression ')' thenBlock=Block (=> iselse?='else' elseBlock=Block)?
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//Expression:
	//	Assignment;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ArithExpression Expression:
	//	Or
	public ArithExpressionElements getArithExpressionAccess() {
		return pArithExpression;
	}
	
	public ParserRule getArithExpressionRule() {
		return getArithExpressionAccess().getRule();
	}
	
	//Assignment Expression:
	//	SelectionExpression ({Assignment.left=current} '=' right=ArithExpression)?
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//SelectionExpression Expression:
	//	TerminalExpression ({MemberSelection.receiver=current}
	//	'.' member=[Member] (ispar?='[' par=[XClass] ']')? (methodinvocation?='(' (args+=Expression (',' args+=Expression)*)?
	//	')')?)*
	public SelectionExpressionElements getSelectionExpressionAccess() {
		return pSelectionExpression;
	}
	
	public ParserRule getSelectionExpressionRule() {
		return getSelectionExpressionAccess().getRule();
	}
	
	//Or Expression:
	//	And ({Or.left=current} '||' right=And)*
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Expression:
	//	Equality ({And.left=current} '&&' right=Equality)*
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality Expression:
	//	Comparison ({Equality.left=current} op=('==' | '!=') right=Comparison)*
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison Expression:
	//	PlusOrMinus ({Comparison.left=current} op=('<=' | '>=' | '<' | '>') right=PlusOrMinus)*
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//PlusOrMinus Expression:
	//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MulOrDiv Expression:
	//	Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//Primary Expression:
	//	'(' Expression ')' | {Not} '!' expression=Primary | SelectionExpression
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//TerminalExpression Expression:
	//	{StringConstant} value=STRING | {IntConstant} value=IntegerNegative | {BoolConstant} value=('true' | 'false') |
	//	{DeRef} ref=[VarDef] '(' ')' | {This} 'this' | {Null} 'null' | {Here} 'here' | {Reference} base=[VarDef] (isarray?='('
	//	params+=SelectionExpression ')')? | {New} 'new' type=VariableType '(' (args+=Expression (',' args+=Expression)*)? ')'
	//	| {Init} '(' type=VariableType ')' '=>' expression=TerminalExpression
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return pTerminalExpression;
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}
	
	//IntegerNegative:
	//	isneg?='-'? value=INT;
	public IntegerNegativeElements getIntegerNegativeAccess() {
		return pIntegerNegative;
	}
	
	public ParserRule getIntegerNegativeRule() {
		return getIntegerNegativeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
