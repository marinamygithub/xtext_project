/**
 * generated by Xtext 2.9.0
 */
package org.xtext.example.mydsl1.generator;

import com.google.common.collect.Iterables;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.xtext.example.mydsl1.aDSL.AbstractElements;
import org.xtext.example.mydsl1.aDSL.And;
import org.xtext.example.mydsl1.aDSL.Assignment;
import org.xtext.example.mydsl1.aDSL.AsyncStat;
import org.xtext.example.mydsl1.aDSL.AtStat;
import org.xtext.example.mydsl1.aDSL.AtomicStatement;
import org.xtext.example.mydsl1.aDSL.Block;
import org.xtext.example.mydsl1.aDSL.Body;
import org.xtext.example.mydsl1.aDSL.BoolConstant;
import org.xtext.example.mydsl1.aDSL.Comparison;
import org.xtext.example.mydsl1.aDSL.DeRef;
import org.xtext.example.mydsl1.aDSL.Equality;
import org.xtext.example.mydsl1.aDSL.Expression;
import org.xtext.example.mydsl1.aDSL.FinishStat;
import org.xtext.example.mydsl1.aDSL.For2Statement;
import org.xtext.example.mydsl1.aDSL.ForStat;
import org.xtext.example.mydsl1.aDSL.FuncVarDef;
import org.xtext.example.mydsl1.aDSL.Here;
import org.xtext.example.mydsl1.aDSL.IfStat;
import org.xtext.example.mydsl1.aDSL.Init;
import org.xtext.example.mydsl1.aDSL.IntConstant;
import org.xtext.example.mydsl1.aDSL.IntegerNegative;
import org.xtext.example.mydsl1.aDSL.MainMethod;
import org.xtext.example.mydsl1.aDSL.Member;
import org.xtext.example.mydsl1.aDSL.MemberSelection;
import org.xtext.example.mydsl1.aDSL.Method;
import org.xtext.example.mydsl1.aDSL.Minus;
import org.xtext.example.mydsl1.aDSL.MulOrDiv;
import org.xtext.example.mydsl1.aDSL.New;
import org.xtext.example.mydsl1.aDSL.Not;
import org.xtext.example.mydsl1.aDSL.Null;
import org.xtext.example.mydsl1.aDSL.Operator;
import org.xtext.example.mydsl1.aDSL.Or;
import org.xtext.example.mydsl1.aDSL.Parameter;
import org.xtext.example.mydsl1.aDSL.Plus;
import org.xtext.example.mydsl1.aDSL.PrintInst;
import org.xtext.example.mydsl1.aDSL.Program;
import org.xtext.example.mydsl1.aDSL.Reference;
import org.xtext.example.mydsl1.aDSL.ReturnStat;
import org.xtext.example.mydsl1.aDSL.SharedArrayDef;
import org.xtext.example.mydsl1.aDSL.SharedDef;
import org.xtext.example.mydsl1.aDSL.SharedVarDef;
import org.xtext.example.mydsl1.aDSL.Statement;
import org.xtext.example.mydsl1.aDSL.StringConstant;
import org.xtext.example.mydsl1.aDSL.This;
import org.xtext.example.mydsl1.aDSL.TryCatchStat;
import org.xtext.example.mydsl1.aDSL.VarDef;
import org.xtext.example.mydsl1.aDSL.VariableDef;
import org.xtext.example.mydsl1.aDSL.VariableType;
import org.xtext.example.mydsl1.aDSL.WhenStatement;
import org.xtext.example.mydsl1.aDSL.WhileStat;
import org.xtext.example.mydsl1.aDSL.XClass;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ADSLGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource res, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = res.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Program> _filter = Iterables.<Program>filter(_iterable, Program.class);
    for (final Program pr : _filter) {
      EList<XClass> _xclass = pr.getXclass();
      for (final XClass cl : _xclass) {
        String _name = cl.getName();
        String _plus = ("ADSL/" + _name);
        String _plus_1 = (_plus + ".x10");
        CharSequence _compile = this.compile(pr);
        fsa.generateFile(_plus_1, _compile);
      }
    }
    CharSequence _kenCompile = this.tokenCompile();
    fsa.generateFile(("ADSL/" + "Token.x10"), _kenCompile);
    CharSequence _distributionCompile = this.distributionCompile();
    fsa.generateFile(("ADSL/" + "Distributions.x10"), _distributionCompile);
  }
  
  public CharSequence distributionCompile() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import x10.regionarray.DistArray;");
    _builder.newLine();
    _builder.append("import x10.regionarray.Dist;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Distributions {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var distributions:DistArray[Dist];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def this(dist:Dist) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("distributions = DistArray.make[Dist](dist);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def set(p:Point, dist:Dist) {\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("distributions(p) = dist;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public operator this(p:Point) = distributions(p);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence tokenCompile() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class Token { ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var token:Long;\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def this() {\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("token = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Take method performs token acquisition");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def take() {\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("when(token == 0) token = 1;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Release method performs release of token");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def release() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("atomic token = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}\t\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Program prog) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<AbstractElements> _importElements = prog.getImportElements();
      for(final AbstractElements element : _importElements) {
        _builder.append("import ");
        String _importedNamespace = element.getImportedNamespace();
        _builder.append(_importedNamespace, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<XClass> _xclass = prog.getXclass();
      for(final XClass cl : _xclass) {
        CharSequence _compileClass = this.compileClass(cl);
        _builder.append(_compileClass, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileClass(final XClass cl) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class ");
    String _name = cl.getName();
    _builder.append(_name, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val cmp : (p1:Place, p2:Place) => Int ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("= (p1:Place, p2:Place) => {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (p1.id() > p2.id()) ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return Int.operator_as(1);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else if (p1.id() < p2.id())");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return Int.operator_as(1);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else return Int.operator_as(0);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("};\t\t\t");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Member> _members = cl.getMembers();
      for(final Member member : _members) {
        _builder.append("\t");
        {
          if ((member instanceof VariableDef)) {
            CharSequence _compile = this.compile(((VariableDef) member));
            _builder.append(_compile, "\t");
          } else {
            if ((member instanceof SharedDef)) {
              CharSequence _compile_1 = this.compile(((SharedDef) member));
              _builder.append(_compile_1, "\t");
            } else {
              if ((member instanceof FuncVarDef)) {
                CharSequence _compile_2 = this.compile(((FuncVarDef) member));
                _builder.append(_compile_2, "\t");
              } else {
                if ((member instanceof Method)) {
                  CharSequence _compile_3 = this.compile(((Method) member));
                  _builder.append(_compile_3, "\t");
                } else {
                  if ((member instanceof Operator)) {
                    CharSequence _compile_4 = this.compile(((Operator) member));
                    _builder.append(_compile_4, "\t");
                  } else {
                    if ((member instanceof PrintInst)) {
                      CharSequence _compile_5 = this.compile(((PrintInst) member));
                      _builder.append(_compile_5, "\t");
                    } else {
                      if ((member instanceof MainMethod)) {
                        CharSequence _compile_6 = this.compile(((MainMethod) member));
                        _builder.append(_compile_6, "\t");
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _builder.append("\t\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final MainMethod member) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("public static def main ( ");
    VariableType _type = member.getType();
    String _typeToString = this.typeToString(_type);
    _builder.append(_typeToString, "");
    _builder.append(" )");
    _builder.newLineIfNotEmpty();
    Body _body = member.getBody();
    CharSequence _compile = this.compile(_body);
    _builder.append(_compile, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Method member) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("def ");
    String _name = member.getName();
    _builder.append(_name, "");
    _builder.append("(");
    EList<Parameter> _params = ((Method) member).getParams();
    String _compile = this.compile(_params);
    _builder.append(_compile, "");
    _builder.append(")");
    {
      boolean _isIstyped = member.isIstyped();
      if (_isIstyped) {
        _builder.append(" : ");
        VariableType _type = member.getType();
        String _typeToString = this.typeToString(_type);
        _builder.append(_typeToString, "");
      }
    }
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      Body _body = ((Method) member).getBody();
      EList<Statement> _statements = _body.getStatements();
      for(final Statement s : _statements) {
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        CharSequence _switchStatement = this.switchStatement(s);
        _builder.append(_switchStatement, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final PrintInst member) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Console.OUT.println(");
    Expression _expression = member.getExpression();
    CharSequence _compile = this.compile(_expression);
    _builder.append(_compile, "");
    _builder.append(") ;");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Operator member) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public operator ");
    String _opName = member.getOpName();
    _builder.append(_opName, "");
    _builder.append(" ( ");
    EList<Parameter> _params = member.getParams();
    String _compile = this.compile(_params);
    _builder.append(_compile, "");
    _builder.append(" ) = ");
    Expression _expression = member.getExpression();
    CharSequence _compile_1 = this.compile(_expression);
    _builder.append(_compile_1, "");
    _builder.append(" ;");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String compile(final EList<Parameter> p) {
    final Function1<Parameter, String> _function = (Parameter it) -> {
      String _name = it.getName();
      String _plus = (_name + ":");
      VariableType _type = it.getType();
      String _typeToString = this.typeToString(_type);
      return (_plus + _typeToString);
    };
    List<String> _map = ListExtensions.<Parameter, String>map(p, _function);
    return IterableExtensions.join(_map, ", ");
  }
  
  public CharSequence switchStatement(final Statement s) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (!_matched) {
      if ((s instanceof IfStat)) {
        _matched=true;
        _switchResult = this.compile(((IfStat) s));
      }
    }
    if (!_matched) {
      if ((s instanceof AtomicStatement)) {
        _matched=true;
        _switchResult = this.compile(((AtomicStatement) s));
      }
    }
    if (!_matched) {
      if ((s instanceof WhenStatement)) {
        _matched=true;
        _switchResult = this.compile(((WhenStatement) s));
      }
    }
    if (!_matched) {
      if ((s instanceof For2Statement)) {
        _matched=true;
        _switchResult = this.compile(((For2Statement) s));
      }
    }
    if (!_matched) {
      if ((s instanceof TryCatchStat)) {
        _matched=true;
        _switchResult = this.compile(((TryCatchStat) s));
      }
    }
    if (!_matched) {
      if ((s instanceof WhileStat)) {
        _matched=true;
        _switchResult = this.compile(((WhileStat) s));
      }
    }
    if (!_matched) {
      if ((s instanceof ForStat)) {
        _matched=true;
        _switchResult = this.compile(((ForStat) s));
      }
    }
    if (!_matched) {
      if ((s instanceof ReturnStat)) {
        _matched=true;
        _switchResult = this.compile(((ReturnStat) s));
      }
    }
    if (!_matched) {
      if ((s instanceof AsyncStat)) {
        _matched=true;
        _switchResult = this.compile(((AsyncStat) s));
      }
    }
    if (!_matched) {
      if ((s instanceof FinishStat)) {
        _matched=true;
        _switchResult = this.compile(((FinishStat) s));
      }
    }
    if (!_matched) {
      if ((s instanceof AtStat)) {
        _matched=true;
        _switchResult = this.compile(((AtStat) s));
      }
    }
    if (!_matched) {
      if ((s instanceof SharedDef)) {
        _matched=true;
        _switchResult = this.compile(((SharedDef) s));
      }
    }
    if (!_matched) {
      if ((s instanceof VariableDef)) {
        _matched=true;
        _switchResult = this.compileStatVariableDef(((VariableDef) s));
      }
    }
    if (!_matched) {
      if ((s instanceof FuncVarDef)) {
        _matched=true;
        _switchResult = this.compile(((FuncVarDef) s));
      }
    }
    if (!_matched) {
      if ((s instanceof Expression)) {
        _matched=true;
        _switchResult = this.compileStatExpression(((Expression) s));
      }
    }
    if (!_matched) {
      _switchResult = "Statement not recognized";
    }
    return _switchResult;
  }
  
  public CharSequence compileStatVariableDef(final VariableDef v) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _compile = this.compile(v);
    _builder.append(_compile, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final FuncVarDef v) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  public CharSequence compileStatExpression(final Expression ex) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _compile = this.compile(ex);
    _builder.append(_compile, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final AtStat s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("at (");
    Expression _exp = s.getExp();
    CharSequence _compile = this.compile(_exp);
    _builder.append(_compile, "");
    _builder.append(") ");
    Block _body = s.getBody();
    CharSequence _compile_1 = this.compile(_body);
    _builder.append(_compile_1, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final FinishStat s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("finish ");
    Block _body = s.getBody();
    CharSequence _compile = this.compile(_body);
    _builder.append(_compile, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final AsyncStat s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("async ");
    Block _body = s.getBody();
    CharSequence _compile = this.compile(_body);
    _builder.append(_compile, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final ReturnStat s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("return ");
    Expression _expression = s.getExpression();
    CharSequence _compile = this.compile(_expression);
    _builder.append(_compile, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final For2Statement s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("for (");
    Parameter _par = s.getPar();
    String _name = _par.getName();
    _builder.append(_name, "");
    _builder.append(" in ");
    Expression _data = s.getData();
    CharSequence _compile = this.compile(_data);
    _builder.append(_compile, "");
    _builder.append(") ");
    Block _body = s.getBody();
    CharSequence _compile_1 = this.compile(_body);
    _builder.append(_compile_1, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final ForStat s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("for (");
    VariableDef _temp = s.getTemp();
    CharSequence _compile = this.compile(_temp);
    _builder.append(_compile, "\t");
    _builder.append(" ");
    Expression _condition = s.getCondition();
    CharSequence _compile_1 = this.compile(_condition);
    _builder.append(_compile_1, "\t");
    _builder.append("; ");
    Expression _finalexp = s.getFinalexp();
    CharSequence _compile_2 = this.compile(_finalexp);
    _builder.append(_compile_2, "\t");
    _builder.append(") ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    Block _body = s.getBody();
    CharSequence _compile_3 = this.compile(_body);
    _builder.append(_compile_3, "\t\t");
    return _builder;
  }
  
  public CharSequence compile(final WhileStat s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("while (");
    Expression _expression = s.getExpression();
    CharSequence _compile = this.compile(_expression);
    _builder.append(_compile, "");
    _builder.append(") ");
    Body _body = s.getBody();
    CharSequence _compile_1 = this.compile(_body);
    _builder.append(_compile_1, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final TryCatchStat s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("try ");
    Body _bodyTry = s.getBodyTry();
    CharSequence _compile = this.compile(_bodyTry);
    _builder.append(_compile, "");
    _builder.newLineIfNotEmpty();
    _builder.append("catch (");
    String _name = s.getName();
    _builder.append(_name, "");
    _builder.append(") ");
    Body _bodyCatch = s.getBodyCatch();
    CharSequence _compile_1 = this.compile(_bodyCatch);
    _builder.append(_compile_1, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Body b) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    {
      EList<Statement> _statements = b.getStatements();
      for(final Statement s : _statements) {
        Object _switchStatement = this.switchStatement(s);
        _builder.append(_switchStatement, "\t");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String getVarName(final VarDef s) {
    String _switchResult = null;
    boolean _matched = false;
    if (!_matched) {
      if (s instanceof VariableDef) {
        _matched=true;
        _switchResult = ((VariableDef)s).getName();
      }
    }
    if (!_matched) {
      if (s instanceof SharedVarDef) {
        _matched=true;
        _switchResult = ((SharedVarDef)s).getName();
      }
    }
    if (!_matched) {
      if (s instanceof Parameter) {
        _matched=true;
        _switchResult = ((Parameter)s).getName();
      }
    }
    return _switchResult;
  }
  
  public CharSequence compile(final WhenStatement s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("when(");
    Expression _expression = s.getExpression();
    CharSequence _compile = this.compile(_expression);
    _builder.append(_compile, "");
    _builder.append(") ");
    Statement _statement = s.getStatement();
    Object _switchStatement = this.switchStatement(_statement);
    _builder.append(_switchStatement, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final IfStat s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if (");
    Expression _expression = s.getExpression();
    CharSequence _compile = this.compile(_expression);
    _builder.append(_compile, "");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    Block _thenBlock = s.getThenBlock();
    CharSequence _compile_1 = this.compile(_thenBlock);
    _builder.append(_compile_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    {
      boolean _isIselse = s.isIselse();
      if (_isIselse) {
        Block _elseBlock = s.getElseBlock();
        CharSequence _compile_2 = this.compile(_elseBlock);
        _builder.append(_compile_2, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final AtomicStatement s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("atomic ");
    Statement _statement = s.getStatement();
    Object _switchStatement = this.switchStatement(_statement);
    _builder.append(_switchStatement, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Block block) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isIspar = block.isIspar();
      boolean _equals = (_isIspar == false);
      if (_equals) {
        EList<Statement> _statements = block.getStatements();
        CharSequence _compileStatements = this.compileStatements(_statements);
        _builder.append(_compileStatements, "");
      } else {
        _builder.append("{");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        EList<Statement> _statements_1 = block.getStatements();
        CharSequence _compileStatements_1 = this.compileStatements(_statements_1);
        _builder.append(_compileStatements_1, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileStatements(final EList<Statement> stats) {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final Statement stat : stats) {
        Object _switchStatement = this.switchStatement(stat);
        _builder.append(_switchStatement, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final SharedDef v) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isReplicas = v.isReplicas();
      boolean _equals = (_isReplicas == true);
      if (_equals) {
        {
          if ((v instanceof SharedVarDef)) {
            CharSequence _compileSharedVarDef_repl = this.compileSharedVarDef_repl(((SharedVarDef) v));
            _builder.append(_compileSharedVarDef_repl, "");
          } else {
            CharSequence _compileSharedArrayDef_repl = this.compileSharedArrayDef_repl(((SharedArrayDef) v));
            _builder.append(_compileSharedArrayDef_repl, "");
          }
        }
        _builder.newLineIfNotEmpty();
      } else {
        {
          boolean _isReplicas_1 = v.isReplicas();
          boolean _equals_1 = (_isReplicas_1 == false);
          if (_equals_1) {
            {
              if ((v instanceof SharedVarDef)) {
                CharSequence _compileSharedVarDef_plshift = this.compileSharedVarDef_plshift(((SharedVarDef) v));
                _builder.append(_compileSharedVarDef_plshift, "");
              } else {
                CharSequence _compileSharedArrayDef_plshift = this.compileSharedArrayDef_plshift(((SharedArrayDef) v));
                _builder.append(_compileSharedArrayDef_plshift, "");
              }
            }
          }
        }
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileSharedVarDef_plshift(final SharedVarDef v) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("val ");
    String _name = v.getName();
    _builder.append(_name, "");
    _builder.append(":");
    VariableType _type = v.getType();
    String _typeToString = this.typeToString(_type);
    _builder.append(_typeToString, "");
    _builder.append(" = ");
    Expression _expression = v.getExpression();
    CharSequence _compile = this.compile(_expression);
    _builder.append(_compile, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("val gc_");
    String _name_1 = v.getName();
    _builder.append(_name_1, "");
    _builder.append(" = GlobalRef[");
    VariableType _type_1 = v.getType();
    String _typeToString_1 = this.typeToString(_type_1);
    _builder.append(_typeToString_1, "");
    _builder.append("](");
    String _name_2 = v.getName();
    _builder.append(_name_2, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileSharedArrayDef_plshift(final SharedArrayDef v) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("val list_");
    String _name = v.getName();
    _builder.append(_name, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileSharedVarDef_repl(final SharedVarDef v) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("val places_");
    String _name = v.getName();
    _builder.append(_name, "");
    _builder.append(":ArrayList[Place] = ");
    VarDef _sym = v.getSym();
    String _varName = this.getVarName(_sym);
    _builder.append(_varName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("places_");
    String _name_1 = v.getName();
    _builder.append(_name_1, "");
    _builder.append(".sort(cmp);");
    _builder.newLineIfNotEmpty();
    _builder.append("val size__");
    String _name_2 = v.getName();
    _builder.append(_name_2, "");
    _builder.append(":Long = places.size();");
    _builder.newLineIfNotEmpty();
    _builder.append("val pGroup_");
    String _name_3 = v.getName();
    _builder.append(_name_3, "");
    _builder.append(":Rail[Place] = new Rail[Place](s);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("for (var i:Long = 0; i < s; i++) ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("pGroup_");
    String _name_4 = v.getName();
    _builder.append(_name_4, "\t\t");
    _builder.append("(i) = places_");
    String _name_5 = v.getName();
    _builder.append(_name_5, "\t\t");
    _builder.append("(i);");
    _builder.newLineIfNotEmpty();
    _builder.append("val placeGroup_");
    String _name_6 = v.getName();
    _builder.append(_name_6, "");
    _builder.append(":PlaceGroup = new SparsePlaceGroup(pGroup);");
    _builder.newLineIfNotEmpty();
    _builder.append("val d_");
    String _name_7 = v.getName();
    _builder.append(_name_7, "");
    _builder.append(" = Dist.makeUnique(placeGroup_");
    String _name_8 = v.getName();
    _builder.append(_name_8, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("val token_");
    String _name_9 = v.getName();
    _builder.append(_name_9, "");
    _builder.append(" = new Token();");
    _builder.newLineIfNotEmpty();
    _builder.append("val gc_");
    String _name_10 = v.getName();
    _builder.append(_name_10, "");
    _builder.append(" = GlobalRef[Token](token_");
    String _name_11 = v.getName();
    _builder.append(_name_11, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("val ");
    String _name_12 = v.getName();
    _builder.append(_name_12, "");
    _builder.append(":DistArray[");
    VariableType _type = v.getType();
    String _typeToString = this.typeToString(_type);
    _builder.append(_typeToString, "");
    _builder.append("] ");
    _builder.newLineIfNotEmpty();
    _builder.append("= DistArray.make[");
    VariableType _type_1 = v.getType();
    String _typeToString_1 = this.typeToString(_type_1);
    _builder.append(_typeToString_1, "");
    _builder.append("](d_");
    String _name_13 = v.getName();
    _builder.append(_name_13, "");
    _builder.append(", ([i]:Point(1) => ");
    Expression _expression = v.getExpression();
    CharSequence _compile = this.compile(_expression);
    _builder.append(_compile, "");
    _builder.append(");\t\t");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileSharedArrayDef_repl(final SharedArrayDef v) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("val size_");
    String _name = v.getName();
    _builder.append(_name, "");
    _builder.append(" = ");
    VariableDef _expression = v.getExpression();
    String _varName = this.getVarName(_expression);
    _builder.append(_varName, "");
    _builder.append(".size();");
    _builder.newLineIfNotEmpty();
    _builder.append("val dist_");
    String _name_1 = v.getName();
    _builder.append(_name_1, "");
    _builder.append(":Dist.makeBlock(Region.make(0, size-1));");
    _builder.newLineIfNotEmpty();
    _builder.append("val distributions_");
    String _name_2 = v.getName();
    _builder.append(_name_2, "");
    _builder.append(":Distributions = new Distributions(dist_");
    String _name_3 = v.getName();
    _builder.append(_name_3, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("var list_");
    String _name_4 = v.getName();
    _builder.append(_name_4, "");
    _builder.append(":DistArray[DistArray[");
    VariableType _type = v.getType();
    String _typeToString = this.typeToString(_type);
    _builder.append(_typeToString, "");
    _builder.append("]] = DistArray.make[DistArray[");
    VariableType _type_1 = v.getType();
    String _typeToString_1 = this.typeToString(_type_1);
    _builder.append(_typeToString_1, "");
    _builder.append("]](dist);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("for (nodeId in dist) {");
    _builder.newLine();
    _builder.append("\t");
    VarDef _sym = v.getSym();
    String _varName_1 = this.getVarName(_sym);
    _builder.append(_varName_1, "\t");
    _builder.append("(nodeId).sort(cmp);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("val s_");
    String _name_5 = v.getName();
    _builder.append(_name_5, "\t");
    _builder.append(":Long = ");
    VarDef _sym_1 = v.getSym();
    String _varName_2 = this.getVarName(_sym_1);
    _builder.append(_varName_2, "\t");
    _builder.append("(nodeId).size();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("val pGroup_");
    String _name_6 = v.getName();
    _builder.append(_name_6, "\t");
    _builder.append(":Rail[Place] = new Rail[Place](s_");
    String _name_7 = v.getName();
    _builder.append(_name_7, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("for (var i:Long = 0; i < s_");
    String _name_8 = v.getName();
    _builder.append(_name_8, "\t");
    _builder.append("; i++) ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("pGroup_");
    String _name_9 = v.getName();
    _builder.append(_name_9, "\t\t");
    _builder.append("(i) = ");
    VarDef _sym_2 = v.getSym();
    String _varName_3 = this.getVarName(_sym_2);
    _builder.append(_varName_3, "\t\t");
    _builder.append("(nodeId)(i);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("val placeGroup_");
    String _name_10 = v.getName();
    _builder.append(_name_10, "\t");
    _builder.append(":PlaceGroup = new SparsePlaceGroup(pGroup_");
    String _name_11 = v.getName();
    _builder.append(_name_11, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val d_");
    String _name_12 = v.getName();
    _builder.append(_name_12, "\t");
    _builder.append(" = Dist.makeUnique(placeGroup_");
    String _name_13 = v.getName();
    _builder.append(_name_13, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("distributions_");
    String _name_14 = v.getName();
    _builder.append(_name_14, "\t");
    _builder.append(".set(nodeId, d_");
    String _name_15 = v.getName();
    _builder.append(_name_15, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("val rep_");
    String _name_16 = v.getName();
    _builder.append(_name_16, "\t");
    _builder.append(":DistArray[");
    VariableDef _expression_1 = v.getExpression();
    VariableType _type_2 = ((VariableDef) _expression_1).getType();
    VariableType _innerType = _type_2.getInnerType();
    _builder.append(_innerType, "\t");
    _builder.append("] = DistArray.make[");
    VariableDef _expression_2 = v.getExpression();
    VariableType _type_3 = ((VariableDef) _expression_2).getType();
    VariableType _innerType_1 = _type_3.getInnerType();
    _builder.append(_innerType_1, "\t");
    _builder.append("](d_");
    String _name_17 = v.getName();
    _builder.append(_name_17, "\t");
    _builder.append(", ([i]:Point(1)) => ");
    VariableDef _expression_3 = v.getExpression();
    String _varName_4 = this.getVarName(_expression_3);
    _builder.append(_varName_4, "\t");
    _builder.append("(nodeId));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("list_");
    String _name_18 = v.getName();
    _builder.append(_name_18, "\t");
    _builder.append("(nodeId) = rep_");
    String _name_19 = v.getName();
    _builder.append(_name_19, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getInnerType(final VariableType v) {
    StringConcatenation _builder = new StringConcatenation();
    VariableType _innerType = v.getInnerType();
    String _typeToString = this.typeToString(_innerType);
    _builder.append(_typeToString, "");
    return _builder;
  }
  
  public CharSequence compile(final VariableDef v) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isIsstatic = v.isIsstatic();
      if (_isIsstatic) {
        _builder.append("static ");
      }
    }
    String _vartype = v.getVartype();
    _builder.append(_vartype, "");
    _builder.append(" ");
    String _name = v.getName();
    _builder.append(_name, "");
    {
      boolean _isIstyped = v.isIstyped();
      if (_isIstyped) {
        _builder.append(":");
        VariableType _type = v.getType();
        String _typeToString = this.typeToString(_type);
        _builder.append(_typeToString, "");
      }
    }
    {
      boolean _isIsinit = v.isIsinit();
      if (_isIsinit) {
        _builder.append(" = ");
        Expression _expression = v.getExpression();
        CharSequence _compile = this.compile(_expression);
        _builder.append(_compile, "");
      }
    }
    _builder.append(";");
    return _builder;
  }
  
  public String typeToString(final VariableType v) {
    String _xifexpression = null;
    boolean _isIsarray = v.isIsarray();
    if (_isIsarray) {
      XClass _type = v.getType();
      String _xclassName = this.xclassName(_type);
      String _plus = (_xclassName + "[");
      VariableType _innerType = v.getInnerType();
      Object _typeToString = this.typeToString(_innerType);
      String _plus_1 = (_plus + _typeToString);
      _xifexpression = (_plus_1 + "]");
    } else {
      XClass _type_1 = v.getType();
      _xifexpression = this.xclassName(_type_1);
    }
    return _xifexpression;
  }
  
  public String xclassName(final XClass c) {
    return c.getName();
  }
  
  public CharSequence compile(final Expression ex) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (!_matched) {
      if ((ex instanceof Or)) {
        _matched=true;
        _switchResult = this.compile(((Or) ex));
      }
    }
    if (!_matched) {
      if ((ex instanceof And)) {
        _matched=true;
        _switchResult = this.compile(((And) ex));
      }
    }
    if (!_matched) {
      if ((ex instanceof Equality)) {
        _matched=true;
        _switchResult = this.compile(((Equality) ex));
      }
    }
    if (!_matched) {
      if ((ex instanceof Comparison)) {
        _matched=true;
        _switchResult = this.compile(((Comparison) ex));
      }
    }
    if (!_matched) {
      if ((ex instanceof MulOrDiv)) {
        _matched=true;
        _switchResult = this.compile(((MulOrDiv) ex));
      }
    }
    if (!_matched) {
      if ((ex instanceof Not)) {
        _matched=true;
        _switchResult = this.compile(((Not) ex));
      }
    }
    if (!_matched) {
      if ((ex instanceof Assignment)) {
        _matched=true;
        _switchResult = this.compile(((Assignment) ex));
      }
    }
    if (!_matched) {
      if ((ex instanceof MemberSelection)) {
        _matched=true;
        _switchResult = this.compile(((MemberSelection) ex));
      }
    }
    if (!_matched) {
      if ((ex instanceof StringConstant)) {
        _matched=true;
        _switchResult = this.compile(((StringConstant) ex));
      }
    }
    if (!_matched) {
      if ((ex instanceof IntConstant)) {
        _matched=true;
        _switchResult = this.compile(((IntConstant) ex));
      }
    }
    if (!_matched) {
      if ((ex instanceof BoolConstant)) {
        _matched=true;
        _switchResult = this.compile(((BoolConstant) ex));
      }
    }
    if (!_matched) {
      if ((ex instanceof This)) {
        _matched=true;
        _switchResult = this.compile(((This) ex));
      }
    }
    if (!_matched) {
      if ((ex instanceof Null)) {
        _matched=true;
        _switchResult = this.compile(((Null) ex));
      }
    }
    if (!_matched) {
      if ((ex instanceof New)) {
        _matched=true;
        _switchResult = this.compile(((New) ex));
      }
    }
    if (!_matched) {
      if ((ex instanceof DeRef)) {
        _matched=true;
        _switchResult = this.compile(((DeRef) ex));
      }
    }
    if (!_matched) {
      if ((ex instanceof Reference)) {
        _matched=true;
        _switchResult = this.compile(((Reference) ex));
      }
    }
    if (!_matched) {
      if ((ex instanceof Plus)) {
        _matched=true;
        _switchResult = this.compile(((Plus) ex));
      }
    }
    if (!_matched) {
      if ((ex instanceof Minus)) {
        _matched=true;
        _switchResult = this.compile(((Minus) ex));
      }
    }
    if (!_matched) {
      if ((ex instanceof Init)) {
        _matched=true;
        _switchResult = this.compile(((Init) ex));
      }
    }
    if (!_matched) {
      if ((ex instanceof Here)) {
        _matched=true;
        _switchResult = this.compile(((Here) ex));
      }
    }
    if (!_matched) {
      _switchResult = "ex not recognized";
    }
    return _switchResult;
  }
  
  public CharSequence compile(final Init ex) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    VariableType _type = ex.getType();
    String _typeToString = this.typeToString(_type);
    _builder.append(_typeToString, "");
    _builder.append(") => ");
    Expression _expression = ex.getExpression();
    Object _compile = this.compile(_expression);
    _builder.append(_compile, "");
    return _builder;
  }
  
  public CharSequence compile(final Or ex) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _left = ex.getLeft();
    CharSequence _compile = this.compile(((And) _left));
    _builder.append(_compile, "");
    _builder.append(" || ");
    Expression _right = ex.getRight();
    CharSequence _compile_1 = this.compile(((And) _right));
    _builder.append(_compile_1, "");
    return _builder;
  }
  
  public CharSequence compile(final And ex) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _left = ex.getLeft();
    CharSequence _compile = this.compile(((Equality) _left));
    _builder.append(_compile, "");
    _builder.append(" && ");
    Expression _right = ex.getRight();
    CharSequence _compile_1 = this.compile(((Equality) _right));
    _builder.append(_compile_1, "");
    return _builder;
  }
  
  public CharSequence compile(final Equality ex) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _left = ex.getLeft();
    Object _compile = this.compile(_left);
    _builder.append(_compile, "");
    _builder.append(" ");
    String _op = ex.getOp();
    _builder.append(_op, "");
    _builder.append(" ");
    Expression _right = ex.getRight();
    Object _compile_1 = this.compile(_right);
    _builder.append(_compile_1, "");
    return _builder;
  }
  
  public CharSequence compile(final Comparison ex) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _left = ex.getLeft();
    Object _compile = this.compile(_left);
    _builder.append(_compile, "");
    _builder.append(" ");
    String _op = ex.getOp();
    _builder.append(_op, "");
    _builder.append(" ");
    Expression _right = ex.getRight();
    Object _compile_1 = this.compile(_right);
    _builder.append(_compile_1, "");
    return _builder;
  }
  
  public CharSequence compile(final Plus ex) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _left = ex.getLeft();
    Object _compile = this.compile(_left);
    _builder.append(_compile, "");
    _builder.append(" + ");
    Expression _right = ex.getRight();
    Object _compile_1 = this.compile(_right);
    _builder.append(_compile_1, "");
    return _builder;
  }
  
  public CharSequence compile(final Minus ex) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _left = ex.getLeft();
    Object _compile = this.compile(_left);
    _builder.append(_compile, "");
    _builder.append(" - ");
    Expression _right = ex.getRight();
    Object _compile_1 = this.compile(_right);
    _builder.append(_compile_1, "");
    return _builder;
  }
  
  public CharSequence compile(final MulOrDiv ex) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _left = ex.getLeft();
    Object _compile = this.compile(_left);
    _builder.append(_compile, "");
    _builder.append(" ");
    String _op = ex.getOp();
    _builder.append(_op, "");
    _builder.append(" ");
    Expression _right = ex.getRight();
    Object _compile_1 = this.compile(_right);
    _builder.append(_compile_1, "");
    return _builder;
  }
  
  public CharSequence compile(final Not ex) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("!");
    Expression _expression = ex.getExpression();
    Object _compile = this.compile(_expression);
    _builder.append(_compile, "");
    return _builder;
  }
  
  public CharSequence compile(final Assignment ex) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _left = ex.getLeft();
    Object _compile = this.compile(_left);
    _builder.append(_compile, "");
    _builder.append(" = ");
    Expression _right = ex.getRight();
    Object _compile_1 = this.compile(_right);
    _builder.append(_compile_1, "");
    return _builder;
  }
  
  public boolean constMem(final Member m) {
    return ((Method) m).isIsconst();
  }
  
  public CharSequence compile(final MemberSelection ex) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _and = false;
      Expression _receiver = ex.getReceiver();
      if (!(_receiver instanceof Reference)) {
        _and = false;
      } else {
        boolean _isMethodinvocation = ex.isMethodinvocation();
        boolean _equals = (_isMethodinvocation == true);
        _and = _equals;
      }
      if (_and) {
        {
          Expression _receiver_1 = ex.getReceiver();
          VarDef _base = ((Reference) _receiver_1).getBase();
          if ((_base instanceof SharedVarDef)) {
            {
              Member _member = ex.getMember();
              boolean _constMem = this.constMem(((Method) _member));
              if (_constMem) {
                CharSequence _compileVarReadAccess = this.compileVarReadAccess(ex);
                _builder.append(_compileVarReadAccess, "");
              } else {
                CharSequence _compileVarWriteAccess = this.compileVarWriteAccess(ex);
                _builder.append(_compileVarWriteAccess, "");
              }
            }
          }
        }
        {
          Expression _receiver_2 = ex.getReceiver();
          VarDef _base_1 = ((Reference) _receiver_2).getBase();
          if ((_base_1 instanceof SharedArrayDef)) {
            {
              Member _member_1 = ex.getMember();
              boolean _constMem_1 = this.constMem(((Method) _member_1));
              if (_constMem_1) {
                CharSequence _compileArrayReadAccess = this.compileArrayReadAccess(ex);
                _builder.append(_compileArrayReadAccess, "");
              } else {
                boolean _and_1 = false;
                Member _member_2 = ex.getMember();
                boolean _constMem_2 = this.constMem(((Method) _member_2));
                if (!_constMem_2) {
                  _and_1 = false;
                } else {
                  Expression _receiver_3 = ex.getReceiver();
                  boolean _isIsarray = ((Reference) _receiver_3).isIsarray();
                  _and_1 = _isIsarray;
                }
                if (_and_1) {
                  CharSequence _compileArrayWriteAccess = this.compileArrayWriteAccess(ex);
                  _builder.append(_compileArrayWriteAccess, "");
                }
              }
            }
          }
        }
      } else {
        CharSequence _compileGeneralAccess = this.compileGeneralAccess(ex);
        _builder.append(_compileGeneralAccess, "");
      }
    }
    return _builder;
  }
  
  public CharSequence compileVarWriteAccess(final MemberSelection ex) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Expression _receiver = ex.getReceiver();
      VarDef _base = ((Reference) _receiver).getBase();
      boolean _isReplicas = ((SharedVarDef) _base).isReplicas();
      if (_isReplicas) {
        CharSequence _compileVarWriteAccess_repl = this.compileVarWriteAccess_repl(ex);
        _builder.append(_compileVarWriteAccess_repl, "");
      } else {
        CharSequence _compileVarAccess_plshift = this.compileVarAccess_plshift(ex);
        _builder.append(_compileVarAccess_plshift, "");
      }
    }
    return _builder;
  }
  
  public CharSequence compileArrayWriteAccess(final MemberSelection ex) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Expression _receiver = ex.getReceiver();
      VarDef _base = ((Reference) _receiver).getBase();
      boolean _isReplicas = ((SharedArrayDef) _base).isReplicas();
      if (_isReplicas) {
        Object _compileArrayWriteAccess_repl = this.compileArrayWriteAccess_repl(ex);
        _builder.append(_compileArrayWriteAccess_repl, "");
      } else {
        Object _compileArrayWriteAccess_plshift = this.compileArrayWriteAccess_plshift(ex);
        _builder.append(_compileArrayWriteAccess_plshift, "");
      }
    }
    return _builder;
  }
  
  public CharSequence compileVarReadAccess(final MemberSelection ex) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Expression _receiver = ex.getReceiver();
      VarDef _base = ((Reference) _receiver).getBase();
      boolean _isReplicas = ((SharedVarDef) _base).isReplicas();
      if (_isReplicas) {
        CharSequence _compileVarReadAccess_repl = this.compileVarReadAccess_repl(ex);
        _builder.append(_compileVarReadAccess_repl, "");
      } else {
        CharSequence _compileVarAccess_plshift = this.compileVarAccess_plshift(ex);
        _builder.append(_compileVarAccess_plshift, "");
      }
    }
    return _builder;
  }
  
  public CharSequence compileArrayReadAccess(final MemberSelection ex) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Expression _receiver = ex.getReceiver();
      VarDef _base = ((Reference) _receiver).getBase();
      boolean _isReplicas = ((SharedArrayDef) _base).isReplicas();
      if (_isReplicas) {
        Object _compileArrayReadAccess_repl = this.compileArrayReadAccess_repl(ex);
        _builder.append(_compileArrayReadAccess_repl, "");
      } else {
        Object _compileArrayReadAccess_plshift = this.compileArrayReadAccess_plshift(ex);
        _builder.append(_compileArrayReadAccess_plshift, "");
      }
    }
    return _builder;
  }
  
  public CharSequence compileVarWriteAccess_repl(final MemberSelection ex) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("at(gc_");
    Expression _receiver = ex.getReceiver();
    VarDef _base = ((Reference) _receiver).getBase();
    String _varName = this.getVarName(_base);
    _builder.append(_varName, "");
    _builder.append(".home) gc_");
    Expression _receiver_1 = ex.getReceiver();
    VarDef _base_1 = ((Reference) _receiver_1).getBase();
    String _varName_1 = this.getVarName(_base_1);
    _builder.append(_varName_1, "");
    _builder.append("().take();");
    _builder.newLineIfNotEmpty();
    _builder.append("for (replica in ");
    Expression _receiver_2 = ex.getReceiver();
    VarDef _base_2 = ((Reference) _receiver_2).getBase();
    String _varName_2 = this.getVarName(_base_2);
    _builder.append(_varName_2, "");
    _builder.append(") async ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    Expression _receiver_3 = ex.getReceiver();
    VarDef _base_3 = ((Reference) _receiver_3).getBase();
    String _varName_3 = this.getVarName(_base_3);
    _builder.append(_varName_3, "\t");
    _builder.append("(replica).");
    Member _member = ex.getMember();
    String _memberName = this.memberName(_member);
    _builder.append(_memberName, "\t");
    {
      boolean _isMethodinvocation = ex.isMethodinvocation();
      if (_isMethodinvocation) {
        _builder.append("(");
        EList<Expression> _args = ex.getArgs();
        String _compileArgs = this.compileArgs(_args);
        _builder.append(_compileArgs, "\t");
        _builder.append(");");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("at(gc_");
    Expression _receiver_4 = ex.getReceiver();
    VarDef _base_4 = ((Reference) _receiver_4).getBase();
    String _varName_4 = this.getVarName(_base_4);
    _builder.append(_varName_4, "");
    _builder.append(".home) gc_");
    Expression _receiver_5 = ex.getReceiver();
    VarDef _base_5 = ((Reference) _receiver_5).getBase();
    String _varName_5 = this.getVarName(_base_5);
    _builder.append(_varName_5, "");
    _builder.append("().release()");
    return _builder;
  }
  
  public CharSequence compileVarReadAccess_repl(final MemberSelection ex) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _receiver = ex.getReceiver();
    Object _compile = this.compile(_receiver);
    _builder.append(_compile, "");
    _builder.append(".");
    Member _member = ex.getMember();
    String _memberName = this.memberName(_member);
    _builder.append(_memberName, "");
    {
      boolean _isMethodinvocation = ex.isMethodinvocation();
      if (_isMethodinvocation) {
        _builder.append("(");
        EList<Expression> _args = ex.getArgs();
        String _compileArgs = this.compileArgs(_args);
        _builder.append(_compileArgs, "");
        _builder.append(")");
      }
    }
    return _builder;
  }
  
  public CharSequence compileVarAccess_plshift(final MemberSelection ex) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("at(gc_");
    Expression _receiver = ex.getReceiver();
    VarDef _base = ((Reference) _receiver).getBase();
    String _varName = this.getVarName(_base);
    _builder.append(_varName, "");
    _builder.append(".home) gc_");
    Expression _receiver_1 = ex.getReceiver();
    VarDef _base_1 = ((Reference) _receiver_1).getBase();
    String _varName_1 = this.getVarName(_base_1);
    _builder.append(_varName_1, "");
    _builder.append("().");
    Member _member = ex.getMember();
    String _memberName = this.memberName(_member);
    _builder.append(_memberName, "");
    {
      boolean _isMethodinvocation = ex.isMethodinvocation();
      if (_isMethodinvocation) {
        _builder.append("(");
        EList<Expression> _args = ex.getArgs();
        String _compileArgs = this.compileArgs(_args);
        _builder.append(_compileArgs, "");
        _builder.append(")");
      }
    }
    return _builder;
  }
  
  public Object compileArrayWriteAccess_repl(final MemberSelection ex) {
    return null;
  }
  
  public Object compileArrayReadAccess_repl(final MemberSelection ex) {
    return null;
  }
  
  public Object compileArrayWriteAccess_plshift(final MemberSelection ex) {
    return null;
  }
  
  public Object compileArrayReadAccess_plshift(final MemberSelection ex) {
    return null;
  }
  
  public CharSequence compileGeneralAccess(final MemberSelection ex) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _receiver = ex.getReceiver();
    Object _compile = this.compile(_receiver);
    _builder.append(_compile, "");
    _builder.append(".");
    Member _member = ex.getMember();
    String _memberName = this.memberName(_member);
    _builder.append(_memberName, "");
    {
      boolean _isMethodinvocation = ex.isMethodinvocation();
      if (_isMethodinvocation) {
        _builder.append("(");
        EList<Expression> _args = ex.getArgs();
        String _compileArgs = this.compileArgs(_args);
        _builder.append(_compileArgs, "");
        _builder.append(")");
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Reference term) {
    StringConcatenation _builder = new StringConcatenation();
    {
      VarDef _base = term.getBase();
      if ((_base instanceof SharedVarDef)) {
        VarDef _base_1 = term.getBase();
        CharSequence _compileVarRef = this.compileVarRef(((SharedVarDef) _base_1));
        _builder.append(_compileVarRef, "");
      } else {
        VarDef _base_2 = term.getBase();
        if ((_base_2 instanceof SharedArrayDef)) {
          {
            boolean _isIsarray = term.isIsarray();
            boolean _equals = (_isIsarray == false);
            if (_equals) {
              CharSequence _compileSharedArrayDef_1 = this.compileSharedArrayDef_1(term);
              _builder.append(_compileSharedArrayDef_1, "");
            } else {
              CharSequence _compileArrayRef = this.compileArrayRef(term);
              _builder.append(_compileArrayRef, "");
            }
          }
        } else {
          CharSequence _compileGeneralVar = this.compileGeneralVar(term);
          _builder.append(_compileGeneralVar, "");
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compileVarRef(final SharedVarDef v) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isReplicas = v.isReplicas();
      if (_isReplicas) {
        CharSequence _compileSharedVarRef_repl = this.compileSharedVarRef_repl(v);
        _builder.append(_compileSharedVarRef_repl, "");
      } else {
        CharSequence _compileSharedVarRef_plshift = this.compileSharedVarRef_plshift(v);
        _builder.append(_compileSharedVarRef_plshift, "");
      }
    }
    return _builder;
  }
  
  public CharSequence compileArrayRef(final Reference term) {
    StringConcatenation _builder = new StringConcatenation();
    {
      VarDef _base = term.getBase();
      boolean _isReplicas = ((SharedArrayDef) _base).isReplicas();
      if (_isReplicas) {
        CharSequence _compileSharedArrayRef_repl = this.compileSharedArrayRef_repl(term);
        _builder.append(_compileSharedArrayRef_repl, "");
      } else {
        Object _compileSharedArrayRef_plshift = this.compileSharedArrayRef_plshift(term);
        _builder.append(_compileSharedArrayRef_plshift, "");
      }
    }
    return _builder;
  }
  
  public String memberName(final Member m) {
    String _xifexpression = null;
    if ((m instanceof Method)) {
      _xifexpression = ((Method) m).getName();
    } else {
      String _xifexpression_1 = null;
      if ((m instanceof VariableDef)) {
        _xifexpression_1 = ((VariableDef) m).getName();
      } else {
        String _xifexpression_2 = null;
        if ((m instanceof SharedVarDef)) {
          _xifexpression_2 = ((SharedVarDef) m).getName();
        } else {
          String _xifexpression_3 = null;
          if ((m instanceof SharedArrayDef)) {
            _xifexpression_3 = ((SharedArrayDef) m).getName();
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public CharSequence compileSharedVarRef_repl(final SharedVarDef v) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = v.getName();
    _builder.append(_name, "");
    _builder.append("(here.id())");
    return _builder;
  }
  
  public CharSequence compileSharedVarRef_plshift(final SharedVarDef v) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("at (gc_");
    String _name = v.getName();
    _builder.append(_name, "");
    _builder.append(".home) gc_");
    String _name_1 = v.getName();
    _builder.append(_name_1, "");
    _builder.append("()");
    return _builder;
  }
  
  public CharSequence compileSharedArrayDef_1(final Reference term) {
    StringConcatenation _builder = new StringConcatenation();
    VarDef _base = term.getBase();
    String _varName = this.getVarName(_base);
    _builder.append(_varName, "");
    return _builder;
  }
  
  public CharSequence compileSharedArrayRef_repl(final Reference term) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("((at(dist_");
    VarDef _base = term.getBase();
    String _varName = this.getVarName(_base);
    _builder.append(_varName, "");
    _builder.append("(");
    {
      EList<Expression> _params = term.getParams();
      for(final Expression param : _params) {
        Object _compile = this.compile(param);
        _builder.append(_compile, "");
        _builder.append("))");
      }
    }
    _builder.append("list_");
    VarDef _base_1 = term.getBase();
    String _varName_1 = this.getVarName(_base_1);
    _builder.append(_varName_1, "");
    _builder.append("(");
    {
      EList<Expression> _params_1 = term.getParams();
      for(final Expression param_1 : _params_1) {
        Object _compile_1 = this.compile(param_1);
        _builder.append(_compile_1, "");
      }
    }
    _builder.append("))(((at(dist_");
    VarDef _base_2 = term.getBase();
    String _varName_2 = this.getVarName(_base_2);
    _builder.append(_varName_2, "");
    _builder.append("(");
    {
      EList<Expression> _params_2 = term.getParams();
      for(final Expression param_2 : _params_2) {
        Object _compile_2 = this.compile(param_2);
        _builder.append(_compile_2, "");
      }
    }
    _builder.append(")) distributions_");
    VarDef _base_3 = term.getBase();
    String _varName_3 = this.getVarName(_base_3);
    _builder.append(_varName_3, "");
    _builder.append("(");
    {
      EList<Expression> _params_3 = term.getParams();
      for(final Expression param_3 : _params_3) {
        Object _compile_3 = this.compile(param_3);
        _builder.append(_compile_3, "");
        _builder.append("))");
      }
    }
    _builder.append(")).get(here)).maxPoint()))");
    return _builder;
  }
  
  public Object compileSharedArrayRef_plshift(final Reference term) {
    return null;
  }
  
  public CharSequence compileGeneralVar(final Reference term) {
    StringConcatenation _builder = new StringConcatenation();
    VarDef _base = term.getBase();
    String _varName = this.getVarName(_base);
    _builder.append(_varName, "");
    {
      boolean _isIsarray = term.isIsarray();
      if (_isIsarray) {
        _builder.append("(");
        {
          EList<Expression> _params = term.getParams();
          for(final Expression param : _params) {
            Object _compile = this.compile(param);
            _builder.append(_compile, "");
          }
        }
        _builder.append(")");
      }
    }
    return _builder;
  }
  
  public String compileArgs(final EList<Expression> ex) {
    final Function1<Expression, Object> _function = (Expression it) -> {
      return this.compile(it);
    };
    List<Object> _map = ListExtensions.<Expression, Object>map(ex, _function);
    return IterableExtensions.join(_map, ", ");
  }
  
  public CharSequence compile(final StringConstant term) {
    StringConcatenation _builder = new StringConcatenation();
    String _value = term.getValue();
    _builder.append(_value, "");
    return _builder;
  }
  
  public CharSequence compile(final BoolConstant term) {
    StringConcatenation _builder = new StringConcatenation();
    String _value = term.getValue();
    _builder.append(_value, "");
    return _builder;
  }
  
  public CharSequence compile(final IntConstant term) {
    StringConcatenation _builder = new StringConcatenation();
    {
      IntegerNegative _value = term.getValue();
      boolean _isIsneg = _value.isIsneg();
      if (_isIsneg) {
        _builder.append("-");
      }
    }
    IntegerNegative _value_1 = term.getValue();
    int _value_2 = _value_1.getValue();
    _builder.append(_value_2, "");
    return _builder;
  }
  
  public CharSequence compile(final DeRef term) {
    StringConcatenation _builder = new StringConcatenation();
    VarDef _ref = term.getRef();
    String _varName = this.getVarName(_ref);
    _builder.append(_varName, "");
    _builder.append("()");
    return _builder;
  }
  
  public CharSequence compile(final This term) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("this");
    return _builder;
  }
  
  public CharSequence compile(final Null term) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("null");
    return _builder;
  }
  
  public CharSequence compile(final New term) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("new ");
    VariableType _type = term.getType();
    String _typeToString = this.typeToString(_type);
    _builder.append(_typeToString, "");
    _builder.append("(");
    EList<Expression> _args = term.getArgs();
    String _compileArgs = this.compileArgs(_args);
    _builder.append(_compileArgs, "");
    _builder.append(")");
    return _builder;
  }
  
  public CharSequence compile(final Here term) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("here");
    return _builder;
  }
}
